// consumerFromData.json - Structured Form Input Data for Tests
{
  "validCases": [
    { "name": "TestUser1", "description": "Basic valid case", "group": "group1", "email": "user1@aexp.com" },
    { "name": "TestUser2", "description": "All fields correct", "group": "group2", "email": "user2@aexp.com" },
    { "name": "UserAlpha", "description": "Alpha Test", "group": "alphaGroup", "email": "alpha@aexp.com" },
    { "name": "BetaTest", "description": "Beta Desc", "group": "betaGroup", "email": "beta@aexp.com" },
    { "name": "Charlie", "description": "Just a user", "group": "devTeam", "email": "charlie@aexp.com" },
    { "name": "TestCaseX", "description": "X Description", "group": "qaGroup", "email": "testx@aexp.com" },
    { "name": "DataFlow", "description": "Flow testing", "group": "pipeline", "email": "flow@aexp.com" },
    { "name": "UIInput", "description": "UI validation", "group": "frontend", "email": "ui@aexp.com" },
    { "name": "EdgeUI", "description": "UI edge valid", "group": "edgeGroup", "email": "edge@aexp.com" },
    { "name": "FormUser", "description": "Form coverage", "group": "formGroup", "email": "form@aexp.com" },

    { "name": "N", "description": "Minimum length name", "group": "minGroup", "email": "min@aexp.com" },
    { "name": "NameWithExactlyMaxLengthAllowedCharacters12345678901234567890", "description": "Max length name", "group": "maxGroup", "email": "max@aexp.com" }
  ],

  "invalidCases": [
    { "name": "", "description": "Missing name", "group": "group1", "email": "user1@aexp.com" },
    { "name": "User", "description": "", "group": "group1", "email": "user1@aexp.com" },
    { "name": "User", "description": "Missing group", "group": "", "email": "user1@aexp.com" },
    { "name": "User", "description": "Missing email", "group": "group1", "email": "" },
    { "name": "User", "description": "Invalid email format", "group": "group1", "email": "invalidemail" },
    { "name": "User", "description": "Special chars in group", "group": "@@invalid@@", "email": "user@aexp.com" },
    { "name": "A".repeat(300), "description": "Too long name", "group": "group1", "email": "longname@aexp.com" },
    { "name": "NormalName", "description": "Too long desc".repeat(100), "group": "group1", "email": "normal@aexp.com" },
    { "name": "User", "description": "Case sensitivity test", "group": "Group1", "email": "user@AEXP.com" },
    { "name": "DuplicateUser", "description": "Duplicate entry", "group": "group1", "email": "user1@aexp.com" },

    { "name": "<script>alert(1)</script>", "description": "JS Injection attempt", "group": "group1", "email": "test@aexp.com" },
    { "name": "   ", "description": "Whitespace name", "group": "group1", "email": "space@aexp.com" },
    { "name": "tab\tname", "description": "Tab char in name", "group": "group1", "email": "tab@aexp.com" },
    { "name": "ValidName", "description": "Overflow desc", "group": "group1", "email": "over@aexp.com" },
    { "name": "ValidName", "description": "", "group": "@@bad@@", "email": "valid@aexp.com" },
    { "name": "ValidName", "description": "Valid", "group": "group1", "email": "test@wrongdomain.com" },
    { "name": "Special!@#", "description": "Special characters in name", "group": "group1", "email": "spec@aexp.com" },
    { "name": "123456", "description": "Only numbers", "group": "group1", "email": "123456@aexp.com" },
    { "name": "CAPSLOCK", "description": "All caps name", "group": "GROUP1", "email": "caps@aexp.com" },
    { "name": "mixedCASE", "description": "Mixed case", "group": "GroupOne", "email": "mix@aexp.com" },

    { "name": "A", "description": "Below min length name", "group": "group1", "email": "short@aexp.com" },
    { "name": "Valid", "description": "Below min length desc", "group": "group1", "email": "shortdesc@aexp.com" },
    { "name": "ThisNameIsWayTooLongToBeAcceptedByTheUIBecauseItExceedsTheDefinedCharacterLimit", "description": "Too long", "group": "group1", "email": "toolong@aexp.com" }
  ],

  "edgeCases": [
    { "name": "Test@123", "description": "Special char in name", "group": "group1", "email": "test123@aexp.com" },
    { "name": "Test User", "description": "Space in name", "group": "group1", "email": "testuser@aexp.com" },
    { "name": "01234", "description": "Numeric name", "group": "123group", "email": "01234@aexp.com" },
    { "name": "   ", "description": "Whitespace only name", "group": "group1", "email": "space@aexp.com" },
    { "name": "CaseCheck", "description": "Case Test", "group": "Group", "email": "case@AEXP.COM" },
    { "name": "CAPSLOCK", "description": "All caps", "group": "GROUP", "email": "CAPS@AEXP.COM" },
    { "name": "longdesc", "description": "A very long description text that exceeds normal UI rendering boundaries to test overflow behavior.", "group": "longdescGroup", "email": "longdesc@aexp.com" },
    { "name": "email+alias", "description": "Alias Email", "group": "group1", "email": "name+alias@aexp.com" },
    { "name": "emoji😀", "description": "Emoji in name", "group": "emojiGroup", "email": "emoji@aexp.com" },
    { "name": "tab\tname", "description": "Tab char", "group": "tabGroup", "email": "tab@aexp.com" }
  ],

  "uiLabels": {
    "header": "Register New Consumer",
    "consumerName": "Consumer Name",
    "consumerDescription": "Consumer Description",
    "readWriteGroup": "Read/Write Group",
    "readOnlyGroup": "Read Only Group (Optional)",
    "email": "Email Distribution Address"
  },

  "uiParagraphs": {
    "topInstructions": "Please provide your consumer details below. For additional help or more information, please visit the Hyperdrive documentation.",
    "nameInfo": "Make your name as descriptive as possible so you can easily identify the use case in the future. This name must be unique to your consumer registration.",
    "registrationIntro": "In order to register a new consumer, you must first tell us which IIQ groups this consumer belongs to. IIQ groups determine Hyperdrive's access control. Users must be members of the associated group in order to have the properly aligned access for that group. If you have questions about the IIQ process, please see the IIQ documentation.",
    "readWriteGroupInfo": "This group has read/write access to configurations and other artifacts that control processing, e.g. use cases, workflows, etc. You need to be a member of the group and not just a custodian.",
    "readOnlyGroupInfo": "This group has read only access to configurations and other artifacts that control processing, e.g. use cases, workflows, etc."
  }
}


=================================================

[
  {
    "description": "Test valid consumer registration",
    "data": {
      "name": "ValidConsumer",
      "description": "A valid consumer description",
      "readWriteGroup": "GG-HYPERDRIVE-FEATURE-TESTER",
      "emailDlAddress": "NARENDRA.B.THODETI@AESP.COM"
    },
    "expected": {
      "validationType": "success"
    }
  },

  {
    "description": "Test consumer registration with long name",
    "data": {
      "name": "ThisIsAVeryLongConsumerNameExceedingTheLimit",
      "description": "Description is fine",
      "readWriteGroup": "GG-HYPERDRIVE-FEATURE-TESTER",
      "emailDlAddress": "NARENDRA.B.THODETI@AESP.COM"
    },
    "expected": {
      "validationType": "Name is too long"
    }
  },
  {
    "description": "Test consumer registration with empty description",
    "data": {
      "name": "ValidConsumer",
      "description": "",
      "readWriteGroup": "GG-HYPERDRIVE-FEATURE-TESTER",
      "emailDlAddress": "NARENDRA.B.THODETI@AESP.COM"
    },
    "expected": {
      "validationType": "Value cannot be empty"
    }
  },
  
  {
    "description": "Test consumer registration with empty email",
    "data": {
      "name": "ValidConsumer",
      "description": "A valid description",
      "readWriteGroup": "GG-HYPERDRIVE-FEATURE-TESTER",
      "emailDlAddress": ""
    },
    "expected": {
      "validationType": "Value cannot be empty"
    }
  },
  {
    "description": "Test consumer registration with invalid IIQ group",
    "data": {
      "name": "ValidConsumer",
      "description": "A valid description",
      "readWriteGroup": "invalidIIQGroup",
      "emailDlAddress": "NARENDRA.B.THODETI@AESP.COM"
    },
    "expected": {
      "validationType": "Invalid IIQ Group"
    }
  },
  {
    "description": "Test consumer registration with name containing special characters",
    "data": {
      "name": "Consumer@#123",
      "description": "A valid description",
      "readWriteGroup": "GG-HYPERDRIVE-FEATURE-TESTER",
      "emailDlAddress": "NARENDRA.B.THODETI@AESP.COM"
    },
    "expected": {
      "validationType": "success"
    }
  },
  {
    "description": "Test consumer registration with numeric name",
    "data": {
      "name": "12345",
      "description": "Numeric name test",
      "readWriteGroup": "GG-HYPERDRIVE-FEATURE-TESTER",
      "emailDlAddress": "NARENDRA.B.THODETI@AESP.COM"
    },
    "expected": {
      "validationType": "success"
    }
  },
  {
    "description": "Test consumer registration with valid @aexp.com email",
    "data": {
      "name": "ValidConsumer",
      "description": "Valid description",
      "readWriteGroup": "GG-HYPERDRIVE-FEATURE-TESTER",
      "emailDlAddress": "NARENDRA.B.THODETI@AESP.COM"
    },
    "expected": {
      "validationType": "success"
    }
  },
  {
    "description": "Test consumer registration with uppercase name",
    "data": {
      "name": "VALIDCONSUMER",
      "description": "Uppercase name",
      "readWriteGroup": "GG-HYPERDRIVE-FEATURE-TESTER",
      "emailDlAddress": "NARENDRA.B.THODETI@AESP.COM"
    },
    "expected": {
      "validationType": "success"
    }
  },
  {
    "description": "Test consumer registration with lowercase name",
    "data": {
      "name": "validconsumer",
      "description": "Lowercase name",
      "readWriteGroup": "GG-HYPERDRIVE-FEATURE-TESTER",
      "emailDlAddress": "NARENDRA.B.THODETI@AESP.COM"
    },
    "expected": {
      "validationType": "success"
    }
  },
  {
    "description": "Test consumer registration with mixed case name",
    "data": {
      "name": "ValiDConsuMer",
      "description": "Mixed case name",
      "readWriteGroup": "GG-HYPERDRIVE-FEATURE-TESTER",
      "emailDlAddress": "NARENDRA.B.THODETI@AESP.COM"
    },
    "expected": {
      "validationType": "success"
    }
  },
  {
    "description": "Test consumer registration with empty name and description",
    "data": {
      "name": "",
      "description": "",
      "readWriteGroup": "GG-HYPERDRIVE-FEATURE-TESTER",
      "emailDlAddress": "NARENDRA.B.THODETI@AESP.COM"
    },
    "expected": {
      "validationType": "Value cannot be empty"
    }


    

  }

 

]


const additionalTestCases = [
  // Field Length Boundary Tests
  {
    description: "Test name field with exactly 50 characters",
    data: {
      name: "A".repeat(50),
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },
  {
    description: "Test description field with exactly 1000 characters",
    data: {
      name: "ValidName",
      description: "A".repeat(1000),
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Email Format Tests
  {
    description: "Test email with subdomain (user@sub.aexp.com)",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "user@sub.aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },
  {
    description: "Test email with numbers (user123@aexp.com)",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "user123@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },
  {
    description: "Test email with special characters (user.name@aexp.com)",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "user.name@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // IIQ Group Format Tests
  {
    description: "Test IIQ group with numbers (GG-HYPERDRIVE-123)",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-123",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },
  {
    description: "Test IIQ group with special characters (GG-HYPER_DRIVE)",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPER_DRIVE",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "Invalid IIQ Group"
    }
  },

  // Security Tests
  {
    description: "Test XSS attempt in name field",
    data: {
      name: "<script>alert('xss')</script>",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "Name is too long" // Or specific XSS validation
    }
  },
  {
    description: "Test SQL injection attempt in description",
    data: {
      name: "ValidName",
      description: "'); DROP TABLE consumers;--",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success" // Should be sanitized
    }
  },

  // Internationalization Tests
  {
    description: "Test Unicode characters in name",
    data: {
      name: "消费者测试",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },
  {
    description: "Test Unicode characters in description",
    data: {
      name: "ValidName",
      description: "描述说明测试",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Whitespace Handling Tests
  {
    description: "Test leading/trailing spaces in name",
    data: {
      name: "  ValidName  ",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },
  {
    description: "Test multiple spaces between words in name",
    data: {
      name: "Valid  Name",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Performance Tests
  {
    description: "Test very long but valid description (10,000 chars)",
    data: {
      name: "ValidName",
      description: "A".repeat(10000),
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "Description is too long"
    }
  },

  // API Integration Tests
  {
    description: "Test IIQ group validation API timeout handling",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-TIMEOUT-TEST",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "Invalid IIQ Group"
    }
  },

  // UI Validation Tests
  {
    description: "Test field focus order (tab navigation)",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },
  {
    description: "Test form submission on Enter key",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Error Recovery Tests
  {
    description: "Test form persistence after validation error",
    data: {
      name: "ValidName",
      description: "",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "Value cannot be empty"
    }
  },
  {
    description: "Test form reset functionality",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Multi-field Validation Tests
  {
    description: "Test multiple field errors (empty name and invalid email)",
    data: {
      name: "",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "invalid@example.com"
    },
    expected: {
      validationType: "Value cannot be empty"
    }
  },
  {
    description: "Test multiple field errors (long name and invalid IIQ group)",
    data: {
      name: "A".repeat(51),
      description: "Valid description",
      readWriteGroup: "INVALID-GROUP",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "Name is too long"
    }
  },

  // Browser Compatibility Tests
  {
    description: "Test form submission in different browsers",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Accessibility Tests
  {
    description: "Test form accessibility (screen reader compatibility)",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },
  {
    description: "Test keyboard-only navigation",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Session Management Tests
  {
    description: "Test form submission after session timeout",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },
  {
    description: "Test form recovery after browser refresh",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Concurrency Tests
  {
    description: "Test multiple simultaneous registrations",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Error Message Tests
  {
    description: "Test error message clarity for invalid email",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "invalid-email"
    },
    expected: {
      validationType: "Email should be @aexp.com"
    }
  },
  {
    description: "Test error message clarity for invalid IIQ group",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "INVALID_GROUP",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "Invalid IIQ Group"
    }
  },

  // Field Dependency Tests
  {
    description: "Test validation when only required fields are filled",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Browser Back Button Tests
  {
    description: "Test form state after browser back button",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Autocomplete Tests
  {
    description: "Test browser autocomplete functionality",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Copy-Paste Tests
  {
    description: "Test pasting values into fields",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Mobile Responsiveness Tests
  {
    description: "Test form layout on mobile viewport",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Performance Under Load Tests
  {
    description: "Test form submission under load",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Localization Tests
  {
    description: "Test form with RTL language",
    data: {
      name: "اسم صالح",
      description: "وصف صالح",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Timezone Tests
  {
    description: "Test form submission in different timezones",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Browser Zoom Tests
  {
    description: "Test form at 150% browser zoom",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Print Style Tests
  {
    description: "Test form print styles",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // JavaScript Disabled Tests
  {
    description: "Test form with JavaScript disabled",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // API Response Time Tests
  {
    description: "Test validation API response time",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Multi-tab Tests
  {
    description: "Test form behavior across multiple tabs",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Browser History Tests
  {
    description: "Test form state in browser history",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Content Security Tests
  {
    description: "Test CSP compliance",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Load Balancer Tests
  {
    description: "Test form submission across different servers",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // CDN Tests
  {
    description: "Test static assets loading from CDN",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // A/B Test Variations
  {
    description: "Test form with different UI variations",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // Dark Mode Tests
  {
    description: "Test form in dark mode",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  },

  // High Contrast Mode Tests
  {
    description: "Test form in high contrast mode",
    data: {
      name: "ValidName",
      description: "Valid description",
      readWriteGroup: "GG-HYPERDRIVE-FEATURE-TESTER",
      emailDlAddress: "test@aexp.com"
    },
    expected: {
      validationType: "success"
    }
  }
];

