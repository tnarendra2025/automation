import { test, expect } from '@playwright/test';

test('test', async ({ page }) => {
  await page.goto('https://authbluesvcqa-vip.phx.aexp.com/ssoi/auth?method=GET&requestid=2c29d405-9e1e-4e2c-a64e-73687177d9a3&target=https%3A%2F%2Fhyperdrive-qa.aexp.com%2F');
  await page.goto('https://authbluesvcqa-vip.phx.aexp.com/ssoi/auth?method=GET&requestid=dfeb0fb3-f9d9-43c3-82b2-92050cf0c87a&target=https%3A%2F%2Fhyperdrive-qa.aexp.com%2Fconsumer%2F390%2Feditparticipant');
  await page.getByLabel('User ID').click();
  await page.getByLabel('User ID').fill('nthodeti');
  await page.getByLabel('Password').click();
  await page.getByLabel('Password').fill('Hyperdrive@UI@5814');
  await page.getByRole('button', { name: 'Log In' }).click();
  await page.getByLabel('Consumer Name').click();
  await page1.goto('https://hyperdrive-qa.aexp.com/consumer/390/editparticipant');
  await expect(page1.getByTestId('section1')).toContainText('Make your name as descriptive as possible so you can easily identify the use case in the future. This name must be unique to your consumer registration.');
  await page1.goto('https://hyperdrive-qa.aexp.com/consumer/390/editparticipant');
  await expect(page3.getByLabel('Consumer Description')).toContainText('This use case will be used solely for Automation Purpose. Please do not make any changes to this Use Case.');
  await expect(page3.getByTestId('section2')).toContainText('In order to register a new consumer, you must first tell us which IIQ groups this registration belongs to. IIQ groups determine Hyperdrive’s access control. Users must be members of the associated group in order to have the properly aligned access for that group. If you have questions about the IIQ process, please see the IIQ documentation.');
  await expect(page3.getByTestId('section2')).toContainText('This group has read/write access to configurations and other artifacts that control processing, e.g. use cases, workflows, etc. You need to be a member of the IIQ group and not just a custodian.');
  await expect(page3.getByTestId('section2')).toContainText('What IIQ settings do I need for this Read/Write group?');
  await expect(page3.getByTestId('section2')).toContainText('Read Only Group (Optional)');
  await expect(page3.getByTestId('section2')).toContainText('Read Only Group (Optional)');
  await expect(page3.getByTestId('section2')).toContainText('This group has read only access to configurations and other artifacts that control processing, e.g. use cases, workflows, etc.');
  await expect(page3.getByTestId('section2')).toContainText('What IIQ settings do I need for this Read Only group?');
  await expect(page3.getByTestId('section2')).toContainText('Show Details');
  await expect(page3.getByTestId('section2')).toContainText('Can’t find your IIQ group?');
  await expect(page3.getByTestId('section3').getByRole('heading')).toContainText('Contact Information');
  await expect(page3.getByTestId('section3').locator('label')).toContainText('Email Distribution Address');
  await expect(page3.getByTestId('section3').getByRole('link')).toContainText('Can’t find your distribution address?');
  await expect(page3.getByTestId('section3').locator('label')).toContainText('Email Distribution Address');
  await expect(page3.getByTestId('section2')).toContainText('Can’t find your IIQ group?');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/390/editparticipant');
  await expect(page4.locator('h4')).toContainText('Edit Consumer');
  const page7Promise = page5.waitForEvent('popup');
  await page5.getByText('Please provide your consumer').click();
  const page7 = await page7Promise;
  await page7.goto('https://login.microsoftonline.com/66295b3b-c4fd-41af-a077-c0ec2a40e369/oauth2/authorize?client%5Fid=00000003%2D0000%2D0ff1%2Dce00%2D000000000000&response%5Fmode=form%5Fpost&response%5Ftype=code%20id%5Ftoken&resource=00000003%2D0000%2D0ff1%2Dce00%2D000000000000&scope=openid&nonce=B299E7D6283CEB7A965B2AB9E0E4B35540C5040E37967C7C%2D8DE9AC00AD6FC6AE79645B1BADB485F0D03A2809328BF87D79E92141C8599494&redirect%5Furi=https%3A%2F%2Fspaces%2Eaexp%2Ecom%2F%5Fforms%2Fdefault%2Easpx&state=OD0w&claims=%7B%22id%5Ftoken%22%3A%7B%22xms%5Fcc%22%3A%7B%22values%22%3A%5B%22CP1%22%5D%7D%7D%7D&wsucxt=1&cobrandid=11bd8083%2D87e0%2D41b5%2Dbb78%2D0bc43c8a8e8a&client%2Drequest%2Did=832e93a1%2Df0e0%2D8000%2D9e57%2D2c02b6695294&sso_reload=true#consumer=');
  await expect(page8.getByRole('heading', { name: 'Edit Consumer' })).toBeVisible();
  await expect(page8.getByRole('heading', { name: 'Register New Consumer' })).toBeVisible();
  await expect(page8.getByText('Please provide your consumer')).toBeVisible();
  await expect(page8.getByRole('heading', { name: 'Identification' })).toBeVisible();
  await expect(page8.getByText('Enter details to help people')).toBeVisible();
  await expect(page8.getByText('Enter details to help people')).toBeVisible();
  await expect(page8.getByText('Consumer Name')).toBeVisible();
  await expect(page8.getByText('Make your name as descriptive')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByTestId('section1').getByLabel('Validate')).toBeVisible();
  await expect(page8.getByText('20')).toBeVisible();
  await expect(page8.getByText('Consumer Description')).toBeVisible();
  await expect(page8.getByText('Briefly describe your')).toBeVisible();
  await expect(page8.getByText('Briefly describe your')).toBeVisible();
  await expect(page8.getByLabel('Consumer Description')).toBeVisible();
  await expect(page8.getByText('250')).toBeVisible();
  await expect(page8.getByRole('heading', { name: 'Registration IIQ Groups' })).toBeVisible();
  await expect(page8.getByText('In order to register a new')).toBeVisible();
  await expect(page8.getByText('Read/Write Group', { exact: true })).toBeVisible();
  await expect(page8.getByText('This group has read/write')).toBeVisible();
  await expect(page8.getByLabel('Read/Write Group')).toBeVisible();
  await expect(page8.locator('div').filter({ hasText: /^Can’t find your IIQ group\?$/ }).first()).toBeVisible();
  await expect(page8.getByText('Read Only Group (Optional)')).toBeVisible();
  await expect(page8.getByText('This group has read only')).toBeVisible();
  await expect(page8.getByText('What IIQ settings do I need for this Read Only group?')).toBeVisible();
  await expect(page8.getByText('Show Details').nth(1)).toBeVisible();
  await expect(page8.getByLabel('Read Only Group (Optional)')).toBeVisible();
  await expect(page8.getByRole('link', { name: 'Can’t find your IIQ group?' }).nth(1)).toBeVisible();
  await expect(page8.getByRole('heading', { name: 'Contact Information' })).toBeVisible();
  await expect(page8.getByText('Email Distribution Address')).toBeVisible();
  await expect(page8.getByLabel('Email Distribution Address')).toBeVisible();
  await expect(page8.getByRole('link', { name: 'Can’t find your distribution' })).toBeVisible();
  await expect(page8.getByRole('button', { name: 'Cancel' })).toBeVisible();
  await expect(page8.getByRole('button', { name: 'Cancel' })).toBeVisible();
  await expect(page8.getByRole('button', { name: 'Account Icon narendra (' })).toBeVisible();
  await expect(page8.getByRole('menuitem', { name: 'Documentation' })).toBeVisible();
  await expect(page8.getByRole('menuitem', { name: 'Dashboard' })).toBeVisible();
  await expect(page8.getByRole('menuitem', { name: 'Home' })).toBeVisible();
  await expect(page8.getByRole('link', { name: 'Logo' })).toBeVisible();
  await expect(page8.getByRole('button', { name: 'Account Icon narendra (' })).toBeVisible();
  await expect(page8.locator('#openModalBtn svg')).toBeVisible();
  await expect(page9.getByLabel('Consumer Name')).toHaveValue('Automation_3159');
  await expect(page9.getByLabel('Consumer Description')).toHaveValue('This use case will be used solely for Automation Purpose.\nPlease do not make any changes to this Use Case.');
  await expect(page9.getByLabel('Consumer Description')).toHaveValue('This use case will be used solely for Automation Purpose.\nPlease do not make any changes to this Use Case.');
  await expect(page9.getByLabel('Consumer Name')).toHaveValue('Automation_3159');
  await expect(page9.getByLabel('Read/Write Group')).toHaveValue('GG-HYPERDRIVE-FEATURE-TESTER');
  await expect(page9.getByLabel('Email Distribution Address')).toHaveValue('trinadha.jada@aexp.com');
  await page10.getByRole('button', { name: 'Account Icon narendra (' }).click();
  await page10.goto('https://hyperdrive-qa.aexp.com/consumer/390/viewparticipant');
  await page10.goto('https://hyperdrive-qa.aexp.com/consumer/390/editparticipant');
  await page10.goto('https://hyperdrive-qa.aexp.com/consumer/390/viewparticipant');
  await page5.goto('https://hyperdrive-qa.aexp.com/consumer/390/viewparticipant');
  await expect(page11.locator('#participantDetails')).toContainText('(Automation_3159).');
  await expect(page11.locator('#participantDetails')).toContainText('(Automation_3159).');
  await page11.goto('https://hyperdrive-qa.aexp.com/consumer/390/viewparticipant');
  await page10.goto('https://hyperdrive-qa.aexp.com/consumer/390/viewparticipant');
  await page10.goto('https://hyperdrive-qa.aexp.com/consumer/390/editparticipant');
  await page10.goto('https://hyperdrive-qa.aexp.com/consumer/390/viewparticipant');
  await expect(page8.getByRole('button', { name: 'Account Icon narendra (' })).toBeVisible();
  await expect(page8.getByRole('button', { name: 'Account Icon narendra (' })).toBeVisible();
  await expect(page8.getByRole('button', { name: 'Account Icon narendra (' })).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await page12.getByLabel('Consumer Name').click();
  await page12.getByLabel('Consumer Name').fill('Automation_3159dfdfadsfadfadf');
  await page12.getByLabel('Consumer Description').fill('This use case will be used solely for Automation Purpose.\nPlease do not make any changes to this Use Case.vThis use case will be used solely for Automation Purpose.\nPlease do not make any changes to this Use Case.This use case will be used solely for Automation Purpose.\nPlease do not make any changes to this Use Case.');
  await page12.getByLabel('Read/Write Group').fill('GG-HYPERDRIVE-FEATURE-TESTERadfas');
  await page12.getByLabel('Email Distribution Address').fill('trinadha.jada@aexdp.com');
  await page12.getByLabel('Read/Write Group').fill('GG-HYPERDRIVE-FEATURE-TESTERadfasadfasdf');
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await page13.goto('https://hyperdrive-qa.aexp.com/consumer/390/Viewparticipant');
  await page13.goto('https://hyperdrive-qa.aexp.com/consumer/390');
  await page13.getByRole('button', { name: 'Account Icon narendra (' }).click();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByLabel('Consumer Name')).toBeVisible();
  await expect(page8.getByTestId('section1').getByLabel('Validate')).toBeVisible();
  await expect(page8.getByText('20')).toBeVisible();
  await expect(page8.getByText('250')).toBeVisible();
  await expect(page8.getByLabel('Email Distribution Address')).toBeVisible();
  await expect(page8.getByLabel('Email Distribution Address')).toBeVisible();
  await page13.goto('https://hyperdrive-qa.aexp.com/consumer/390/editparticipant');
  await page13.goto('https://hyperdrive-qa.aexp.com/consumer/390/viewparticipant');
});
