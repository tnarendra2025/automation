import { test, expect } from '@playwright/test';

test('test', async ({ page }) => {
  await page.goto('https://authbluesvcqa-vip.phx.aexp.com/ssoi/auth?method=GET&requestid=30642413-7b3c-42c1-9948-90229312f5e0&target=https%3A%2F%2Fhyperdrive-qa.aexp.com%2F');
  await page.getByRole('textbox', { name: 'User ID' }).click();
  await page.getByRole('textbox', { name: 'User ID' }).fill('nthodeti');
  await page.getByRole('textbox', { name: 'Password' }).click();
  await page.getByRole('textbox', { name: 'Password' }).fill('Hyperdrive@UI@5814');
  await page.getByRole('button', { name: 'Log In' }).click();
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/639');
  await page.getByRole('button', { name: 'Account Icon narendra (' }).click();
  await page.locator('#participants').selectOption('482');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/482');
  await page.locator('#participants').selectOption('390');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/390/viewusecase?useCaseId=44ea4881-7e3e-4db5-9639-45aec41219d2');
  await page.locator('#participants').selectOption('');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/addparticipant');
  await page.getByRole('textbox', { name: 'Consumer Name' }).fill('test_April');
  await page.getByRole('textbox', { name: 'Consumer Description' }).fill('afadsfads');
  await page.getByRole('textbox', { name: 'Read Only Group (Optional)' }).fill('GG-HYPERDRIVE-FEATURE-TESTER');
  await page.getByRole('textbox', { name: 'Email Distribution Address' }).fill('aa@aexp.com');
  await page.getByRole('textbox', { name: 'Email Distribution Address' }).press('NumLock');
  await page.getByRole('textbox', { name: 'Read/Write Group' }).fill('GG-HYPERDRIVE-FEATURE-TESTER');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/addusecase');
  await page.locator('#useCaseName').fill('test_April');
  const page1Promise = page.waitForEvent('popup');
  await page.locator('#totalAmt').fill('33');
  const page1 = await page1Promise;
  await page1.goto('https://login.microsoftonline.com/66295b3b-c4fd-41af-a077-c0ec2a40e369/oauth2/authorize?client%5Fid=00000003%2D0000%2D0ff1%2Dce00%2D000000000000&response%5Fmode=form%5Fpost&response%5Ftype=code%20id%5Ftoken&resource=00000003%2D0000%2D0ff1%2Dce00%2D000000000000&scope=openid&nonce=EA86204FD5443DE43E86FD4A6CE8F37D402EC5558C713072%2D1A1582266D4DA6043C7E40262624C304A43B2F0B6C65A7FB7A1A3051F811C668&redirect%5Furi=https%3A%2F%2Fspaces%2Eaexp%2Ecom%2F%5Fforms%2Fdefault%2Easpx&state=OD0w&claims=%7B%22id%5Ftoken%22%3A%7B%22xms%5Fcc%22%3A%7B%22values%22%3A%5B%22CP1%22%5D%7D%7D%7D&wsucxt=1&cobrandid=11bd8083%2D87e0%2D41b5%2Dbb78%2D0bc43c8a8e8a&client%2Drequest%2Did=da3c92a1%2Db0e8%2D8000%2D98c3%2D51b1d5dbc906&sso_reload=true');
  await page.locator('#projectDetail').fill('https://hyperdrive-qa.aexp.com/consumer/643/addusecase');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/reqaccess/requestaccess/useCasePurpose?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5&acsReqId=');
  await page.getByRole('textbox', { name: 'Use Case Purpose' }).fill('Test');
  await page.getByRole('textbox', { name: 'CAR ID' }).fill('500000138');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/reqaccess/requestaccess/sourceAndEventTypes?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5&acsReqId=f7462c1a-ec15-4b7a-ac99-875f49f635bb');
  await page.locator('#location').selectOption('Global Processing');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/viewusecase?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5');
});
=============================================================================================
import { test, expect } from '@playwright/test';
import ConsumerPage from '../../pages/consumerPage/consumerPage.js';

let page;
let consumerPage;

// Configure test suite
test.describe.configure({ mode: 'serial' });

// Login credentials
const credentials = {
  username: 'nthodeti',
  password: 'Hyperdrive@UI@5814'
};

// Page Elements
const selectors = {
  userId: 'textbox[name="User ID"]',
  password: 'textbox[name="Password"]',
  loginButton: 'button[name="Log In"]',
  participantsDropdown: '#participants',
  consumerNameInput: 'textbox[name="Consumer Name"]',
  consumerDescInput: 'textbox[name="Consumer Description"]',
  readOnlyGroupInput: 'textbox[name="Read Only Group (Optional)"]',
  emailInput: 'textbox[name="Email Distribution Address"]',
  readWriteGroupInput: 'textbox[name="Read/Write Group"]',
  useCaseNameInput: '#useCaseName',
  totalAmountInput: '#totalAmt',
  projectDetailInput: '#projectDetail',
  useCasePurposeInput: 'textbox[name="Use Case Purpose"]',
  carIdInput: 'textbox[name="CAR ID"]',
  locationDropdown: '#location'
};

// Utility for login
async function login(page) {
  await page.goto('https://authbluesvcqa-vip.phx.aexp.com/ssoi/auth?...');
  await page.getByRole('textbox', { name: 'User ID' }).fill(credentials.username);
  await page.getByRole('textbox', { name: 'Password' }).fill(credentials.password);
  await page.getByRole('button', { name: 'Log In' }).click();
}

// Methods
async function fillConsumerDetails(page) {
  await page.getByRole('textbox', { name: 'Consumer Name' }).fill('test_April');
  await page.getByRole('textbox', { name: 'Consumer Description' }).fill('afadsfads');
  await page.getByRole('textbox', { name: 'Read Only Group (Optional)' }).fill('GG-HYPERDRIVE-FEATURE-TESTER');
  await page.getByRole('textbox', { name: 'Email Distribution Address' }).fill('aa@aexp.com');
  await page.getByRole('textbox', { name: 'Email Distribution Address' }).press('NumLock');
  await page.getByRole('textbox', { name: 'Read/Write Group' }).fill('GG-HYPERDRIVE-FEATURE-TESTER');
}

async function fillUseCaseDetails(page) {
  await page.locator('#useCaseName').fill('test_April');
  const popupPromise = page.waitForEvent('popup');
  await page.locator('#totalAmt').fill('33');
  const popup = await popupPromise;
  await popup.goto('https://login.microsoftonline.com/...');
  await page.locator('#projectDetail').fill('https://hyperdrive-qa.aexp.com/consumer/643/addusecase');
}

async function completeRequestAccessFlow(page) {
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/reqaccess/requestaccess/useCasePurpose?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5&acsReqId=');
  await page.getByRole('textbox', { name: 'Use Case Purpose' }).fill('Test');
  await page.getByRole('textbox', { name: 'CAR ID' }).fill('500000138');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/reqaccess/requestaccess/sourceAndEventTypes?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5&acsReqId=f7462c1a-ec15-4b7a-ac99-875f49f635bb');
  await page.locator('#location').selectOption('Global Processing');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/viewusecase?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5');
}

// Set up the test environment

test.beforeAll(async ({ browser }) => {
  page = await browser.newPage();
  consumerPage = new ConsumerPage(page);
});

// Consumer Flow Test Suite

test.describe('Complete Consumer Workflow Tests', () => {
  test('Consumer Full Flow Execution', async () => {
    await login(page);

    await page.goto('https://hyperdrive-qa.aexp.com/consumer/639');
    await page.getByRole('button', { name: /Account Icon narendra/i }).click();

    await page.locator('#participants').selectOption('482');
    await page.goto('https://hyperdrive-qa.aexp.com/consumer/482');
    await page.locator('#participants').selectOption('390');
    await page.goto('https://hyperdrive-qa.aexp.com/consumer/390/viewusecase?useCaseId=44ea4881-7e3e-4db5-9639-45aec41219d2');
    await page.locator('#participants').selectOption('');

    await page.goto('https://hyperdrive-qa.aexp.com/consumer/addparticipant');
    await fillConsumerDetails(page);

    await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/addusecase');
    await fillUseCaseDetails(page);

    await completeRequestAccessFlow(page);
  });
});

// Clean up

test.afterAll(async () => {
  await page.close();
});

nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn

import { test, expect } from "@playwright/test";
import consumerFromData from "../../data/consumerFromData.json";
import HomePage from "../../pages/commonPage/homePage.js";
import ConsumerRegistionPage from "../../pages/consumerPage/consumerPage.js";
import { CONSUMER_RESGISTRATION_URL } from "../../data/Constant/constent.js";

test.describe("Consumer Details and Registration Page Validation", () => {
  let page;
  let homePage;
  let consumerRegistionPage;

  test.beforeEach(async ({ browser }) => {
    page = await browser.newPage();
    await page.goto("https://hyperdrive-qa.aexp.com/");
    homePage = new HomePage(page);
    await homePage.login("nthodeti", "Hyperdrive@UI@5814");
    await page.waitForLoadState("domcontentloaded");
  });
  
  const navigateToConsumerRegistration = async () => {
    await homePage.profile();
    await homePage.selectConsumer();
    await homePage.addnewRegistration();
    consumerRegistionPage = new ConsumerRegistionPage(page);
  };

  consumerFromData.forEach(({ description, data, expected }) => {
    test(description, async () => {
      const randomSuffix = Math.floor(Math.random() * 1000 + 1);
      await navigateToConsumerRegistration();
      
      // Registering a new consumer
      await consumerRegistionPage.registerNewConsumer(
        `${data.name}${randomSuffix}`,
        data.name,
        data.description,
        data.readWriteGroup,
        data.emailDlAddress
      );

      await page.waitForTimeout(2000);
      await validateConsumerRegistration(expected.validationType);
    });
  });

  const validateConsumerRegistration = async (validationType) => {
    const validationMessages = {
      success: async () => {
        await expect.soft(page).toHaveURL("https://hyperdrive-qa.aexp.com/consumer/addparticipant");
        //await expect.soft(page).toHaveURL("https://hyperdrive-dev.aexp.com/consumer/dashboard/addparticipant");
      },
      "Name is too long": async () => {
        await validateErrorMessage(await consumerRegistionPage.getLongConsumerNameError(), "Name is too long");
      },
      "Description is too long": async () => {
        await validateErrorMessage(await consumerRegistionPage.getLongDescriptionError(), "Description is too long");
      },
      "Email should be @aexp.com": async () => {
        await validateErrorMessage(await consumerRegistionPage.getInvalidEmailError(), "Email should be @aexp.com");
      },
      "Invalid IIQ Group": async () => {
        await validateErrorMessage(await consumerRegistionPage.getInvalidIIQGroupError(), "Group ID not found in IIQ.");
      },
      "Group ID not found in IIQ": async () => {
        await validateErrorMessage(await consumerRegistionPage.getInvalidIIQGroupError(), "Group ID not found in IIQ.");
      },
      "Value cannot be empty": async () => {
        await validateErrorMessage(await consumerRegistionPage.getValueCannotBeEmptyError(), "The value cannot be empty.");
      },
    };

    if (validationMessages[validationType]) {
      await validationMessages[validationType]();
    } else {
      throw new Error(`Unhandled validation type: ${validationType}`);
    }
  };

  const validateErrorMessage = async (actualMessage, expectedMessage) => {
    console.log("Actual message:", actualMessage);
    await expect.soft(actualMessage).toContain(expectedMessage);
  };

  test("Verify user action menu", async () => {
    await homePage.profile();
    await homePage.userActionMenuButtonVisiable();
  });

  test("Verified background color", async () => {
    const homePage = new HomePage(page);
    const consumerRegistionPage = new ConsumerRegistionPage(page);
    await homePage.profile();
    await homePage.selectConsumer();
    await homePage.addnewRegistration();
    navigateToConsumerRegistration();
    await consumerRegistionPage.carIdLocator.fill("500000138");
    await consumerRegistionPage.carIdValidateLocator.click();
    await page.waitForTimeout(2000);
    const element = await consumerRegistionPage.carId_Color;
    await homePage.backGroundColor(element); //*[name()='svg']/parent::span/parent::button/preceding::input[@id='carId']
  });

  test("Verified validate buttons before producer regisatraion", async () => {
    const homePage = new HomePage(page);
    const consumerRegistionPage = new ConsumerRegistionPage(page);
    await homePage.profile();
    await homePage.selectProducer();
    await homePage.addnewRegistration();
    const count = await consumerRegistionPage.validatebtn_Loc.count();
    console.log("tolal number of disable validate buttons.....:-  ", count);
    for (let i = 0; i < count; i++) {
      await expect
        .soft(consumerRegistionPage.validatebtn_Loc.nth(i))
        .toBeDisabled();
    }
    await expect.soft(consumerRegistionPage.submitBtnLocator).toBeDisabled();
  });

  

  test("Verified background color of Name ", async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.consumerName.fill("Test0009");
    await consumerRegistionPage.locators.nameValidateBtn.click();
    await consumerRegistionPage.locators.Name_Color.click();
    const element = await consumerRegistionPage.locators.Name_Color;
    await homePage.backGroundColor(element);
  });


  // test('Verify Profile Menu Click', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.profileMenu.click();
  //   const element = await consumerRegistionPage.locators.profileMenu;
  //   await homePage.verifyElement(element);
  // });

  // test("Verified validate buttons before producer regisatraion", async () => {
  //   const homePage = new HomePage(page);
  //   const consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await homePage.profile();
  //   await homePage.selectConsumer();
  //   await homePage.addnewRegistration();
  //   const count = await consumerRegistionPage.validatebtn_Loc.count();
  //   console.log("tolal number of disable validate buttons.....:-  ", count);
  //   for (let i = 0; i < count; i++) {
  //     await expect
  //       .soft(consumerRegistionPage.validatebtn_Loc.nth(i))
  //       .toBeDisabled();
  //   }
  //   await expect.soft(consumerRegistionPage.submitBtnLocator).toBeDisabled();
  // });
  
  // test("Verified Passing empty name", async () => {
  //   const homePage = new HomePage(page);
  //   const consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await homePage.profile();
  //   await homePage.selectConsumer();
  //   await homePage.addnewRegistration();
  //   await consumerRegistionPage.consumerName.fill("  "),
  //   await consumerRegistionPage.nameValidateBtn.click();
  //   await expect
  //     .soft(consumerRegistionPage.valueCannotBeEmpty_Loc)
  //     .toBeVisible();
  // });

  // test('Verify Consumer Option Selection', async () => {
  //   const homePage = new HomePage(page);
  //   const consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await homePage.profile();
  //   await homePage.selectConsumer();
  //   await homePage.addnewRegistration();
  //   await consumerRegistionPage.locators.consumerOption.click()
  //   const element = await consumerRegistionPage.locators.consumerOption;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Add New Registration Click', async () => {
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.locators.consumerOption.click()
  //   await consumerRegistionPage.locators.addNewRegistration.click();
  //   const element = await consumerRegistionPage.locators.addNewRegistration;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Name Label Interaction', async () => {
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.locators.nameLabel.click();
  //   const element = await consumerRegistionPage.locators.nameLabel;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Name Help Text Interaction', async () => {
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.locators.nameHelpText.click();
  //   const element = await consumerRegistionPage.locators.nameHelpText;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Description Field Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.descriptionField.click();
  //   const element = await consumerRegistionPage.locators.descriptionField;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Description Label Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.descriptionLabel.click();
  //   const element = await consumerRegistionPage.locators.descriptionLabel;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Read Write Group Field Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.readWriteGroupField.click();
  //   const element = await consumerRegistionPage.locators.readWriteGroupField;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Read Write Group Label Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.readWriteGroupLabel.click();
  //   const element = await consumerRegistionPage.locators.readWriteGroupLabel;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Email Field Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.emailField.click();
  //   const element = await consumerRegistionPage.locators.emailField;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Email Label Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.emailLabel.click();
  //   const element = await consumerRegistionPage.locators.emailLabel;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Submit Button Click', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.submitButton.click();
  //   const element = await consumerRegistionPage.locators.submitButton;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Cancel Button Click', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.cancelButton.click();
  //   const element = await consumerRegistionPage.locators.cancelButton;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Name Counter Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.nameCounter.click();
  //   const element = await consumerRegistionPage.locators.nameCounter;
  //   await homePage.verifyElement(element);
  // });
  // test('Verify Validation Icon Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.validationIcon.click();
  //   const element = await consumerRegistionPage.locators.validationIcon;
  //   await homePage.verifyElement(element);
  // }); 

  // test('Verify that the Show Details/Hide Details button is working and displaying respective content', async()=>{
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.checkShowHideButtonFunctionality();            
  //  })

  // test('Verify the change of state of validate button when clicked after giving a proper name', async()=>{
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.consumerName.fill('Auto'+Math.floor(Math.random*1000));
  //   await consumerRegistionPage.nameValidateBtn.click();    
  //   await expect(consumerRegistionPage.nameValidationGreenTickMarkLocator).toBeVisible();
  //  }); 

  // test('Verify the change of state of validate button when clicked after giving a proper IIQ Group', async()=>{
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.iiqGroupLocator.fill('gg-hyperdrive-feature-tester');
  //   await consumerRegistionPage.iiqGroupValidateLocator.click();    
  //   await expect(consumerRegistionPage.iiqGroupValidatetickmarkLocator).toBeVisible();
  //  });

  // test('Verify that Validate Buttons and Register Button were intially in disabled state before entering any details', async()=>{
  //   const consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await expect (consumerRegistionPage.nameValidateLocator).toHaveAttribute('Disabled');
  //   await expect (consumerRegistionPage.iiqGroupValidateLocator).toHaveAttribute('Disabled');
  //   await expect (consumerRegistionPage.registerButtonLocator).toHaveAttribute('Disabled');
  //  })  

  test.afterEach(async () => {
    await homePage.quit();
  });
  

});


