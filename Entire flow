import { test, expect } from '@playwright/test';

test('test', async ({ page }) => {
  await page.goto('https://authbluesvcqa-vip.phx.aexp.com/ssoi/auth?method=GET&requestid=30642413-7b3c-42c1-9948-90229312f5e0&target=https%3A%2F%2Fhyperdrive-qa.aexp.com%2F');
  await page.getByRole('textbox', { name: 'User ID' }).click();
  await page.getByRole('textbox', { name: 'User ID' }).fill('nthodeti');
  await page.getByRole('textbox', { name: 'Password' }).click();
  await page.getByRole('textbox', { name: 'Password' }).fill('Hyperdrive@UI@5814');
  await page.getByRole('button', { name: 'Log In' }).click();
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/639');
  await page.getByRole('button', { name: 'Account Icon narendra (' }).click();
  await page.locator('#participants').selectOption('482');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/482');
  await page.locator('#participants').selectOption('390');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/390/viewusecase?useCaseId=44ea4881-7e3e-4db5-9639-45aec41219d2');
  await page.locator('#participants').selectOption('');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/addparticipant');
  await page.getByRole('textbox', { name: 'Consumer Name' }).fill('test_April');
  await page.getByRole('textbox', { name: 'Consumer Description' }).fill('afadsfads');
  await page.getByRole('textbox', { name: 'Read Only Group (Optional)' }).fill('GG-HYPERDRIVE-FEATURE-TESTER');
  await page.getByRole('textbox', { name: 'Email Distribution Address' }).fill('aa@aexp.com');
  await page.getByRole('textbox', { name: 'Email Distribution Address' }).press('NumLock');
  await page.getByRole('textbox', { name: 'Read/Write Group' }).fill('GG-HYPERDRIVE-FEATURE-TESTER');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/addusecase');
  await page.locator('#useCaseName').fill('test_April');
  const page1Promise = page.waitForEvent('popup');
  await page.locator('#totalAmt').fill('33');
  const page1 = await page1Promise;
  await page1.goto('https://login.microsoftonline.com/66295b3b-c4fd-41af-a077-c0ec2a40e369/oauth2/authorize?client%5Fid=00000003%2D0000%2D0ff1%2Dce00%2D000000000000&response%5Fmode=form%5Fpost&response%5Ftype=code%20id%5Ftoken&resource=00000003%2D0000%2D0ff1%2Dce00%2D000000000000&scope=openid&nonce=EA86204FD5443DE43E86FD4A6CE8F37D402EC5558C713072%2D1A1582266D4DA6043C7E40262624C304A43B2F0B6C65A7FB7A1A3051F811C668&redirect%5Furi=https%3A%2F%2Fspaces%2Eaexp%2Ecom%2F%5Fforms%2Fdefault%2Easpx&state=OD0w&claims=%7B%22id%5Ftoken%22%3A%7B%22xms%5Fcc%22%3A%7B%22values%22%3A%5B%22CP1%22%5D%7D%7D%7D&wsucxt=1&cobrandid=11bd8083%2D87e0%2D41b5%2Dbb78%2D0bc43c8a8e8a&client%2Drequest%2Did=da3c92a1%2Db0e8%2D8000%2D98c3%2D51b1d5dbc906&sso_reload=true');
  await page.locator('#projectDetail').fill('https://hyperdrive-qa.aexp.com/consumer/643/addusecase');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/reqaccess/requestaccess/useCasePurpose?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5&acsReqId=');
  await page.getByRole('textbox', { name: 'Use Case Purpose' }).fill('Test');
  await page.getByRole('textbox', { name: 'CAR ID' }).fill('500000138');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/reqaccess/requestaccess/sourceAndEventTypes?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5&acsReqId=f7462c1a-ec15-4b7a-ac99-875f49f635bb');
  await page.locator('#location').selectOption('Global Processing');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/viewusecase?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5');
});
=============================================================================================
import { test, expect } from '@playwright/test';
import ConsumerPage from '../../pages/consumerPage/consumerPage.js';

let page;
let consumerPage;

// Configure test suite
test.describe.configure({ mode: 'serial' });

// Login credentials
const credentials = {
  username: 'nthodeti',
  password: 'Hyperdrive@UI@5814'
};

// Page Elements
const selectors = {
  userId: 'textbox[name="User ID"]',
  password: 'textbox[name="Password"]',
  loginButton: 'button[name="Log In"]',
  participantsDropdown: '#participants',
  consumerNameInput: 'textbox[name="Consumer Name"]',
  consumerDescInput: 'textbox[name="Consumer Description"]',
  readOnlyGroupInput: 'textbox[name="Read Only Group (Optional)"]',
  emailInput: 'textbox[name="Email Distribution Address"]',
  readWriteGroupInput: 'textbox[name="Read/Write Group"]',
  useCaseNameInput: '#useCaseName',
  totalAmountInput: '#totalAmt',
  projectDetailInput: '#projectDetail',
  useCasePurposeInput: 'textbox[name="Use Case Purpose"]',
  carIdInput: 'textbox[name="CAR ID"]',
  locationDropdown: '#location'
};

// Utility for login
async function login(page) {
  await page.goto('https://authbluesvcqa-vip.phx.aexp.com/ssoi/auth?...');
  await page.getByRole('textbox', { name: 'User ID' }).fill(credentials.username);
  await page.getByRole('textbox', { name: 'Password' }).fill(credentials.password);
  await page.getByRole('button', { name: 'Log In' }).click();
}

// Methods
async function fillConsumerDetails(page) {
  await page.getByRole('textbox', { name: 'Consumer Name' }).fill('test_April');
  await page.getByRole('textbox', { name: 'Consumer Description' }).fill('afadsfads');
  await page.getByRole('textbox', { name: 'Read Only Group (Optional)' }).fill('GG-HYPERDRIVE-FEATURE-TESTER');
  await page.getByRole('textbox', { name: 'Email Distribution Address' }).fill('aa@aexp.com');
  await page.getByRole('textbox', { name: 'Email Distribution Address' }).press('NumLock');
  await page.getByRole('textbox', { name: 'Read/Write Group' }).fill('GG-HYPERDRIVE-FEATURE-TESTER');
}

async function fillUseCaseDetails(page) {
  await page.locator('#useCaseName').fill('test_April');
  const popupPromise = page.waitForEvent('popup');
  await page.locator('#totalAmt').fill('33');
  const popup = await popupPromise;
  await popup.goto('https://login.microsoftonline.com/...');
  await page.locator('#projectDetail').fill('https://hyperdrive-qa.aexp.com/consumer/643/addusecase');
}

async function completeRequestAccessFlow(page) {
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/reqaccess/requestaccess/useCasePurpose?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5&acsReqId=');
  await page.getByRole('textbox', { name: 'Use Case Purpose' }).fill('Test');
  await page.getByRole('textbox', { name: 'CAR ID' }).fill('500000138');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/reqaccess/requestaccess/sourceAndEventTypes?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5&acsReqId=f7462c1a-ec15-4b7a-ac99-875f49f635bb');
  await page.locator('#location').selectOption('Global Processing');
  await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/viewusecase?useCaseId=cb51f8ff-1620-45c6-ac87-ca467f4908c5');
}

// Set up the test environment

test.beforeAll(async ({ browser }) => {
  page = await browser.newPage();
  consumerPage = new ConsumerPage(page);
});

// Consumer Flow Test Suite

test.describe('Complete Consumer Workflow Tests', () => {
  test('Consumer Full Flow Execution', async () => {
    await login(page);

    await page.goto('https://hyperdrive-qa.aexp.com/consumer/639');
    await page.getByRole('button', { name: /Account Icon narendra/i }).click();

    await page.locator('#participants').selectOption('482');
    await page.goto('https://hyperdrive-qa.aexp.com/consumer/482');
    await page.locator('#participants').selectOption('390');
    await page.goto('https://hyperdrive-qa.aexp.com/consumer/390/viewusecase?useCaseId=44ea4881-7e3e-4db5-9639-45aec41219d2');
    await page.locator('#participants').selectOption('');

    await page.goto('https://hyperdrive-qa.aexp.com/consumer/addparticipant');
    await fillConsumerDetails(page);

    await page.goto('https://hyperdrive-qa.aexp.com/consumer/643/addusecase');
    await fillUseCaseDetails(page);

    await completeRequestAccessFlow(page);
  });
});

// Clean up

test.afterAll(async () => {
  await page.close();
});

nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn

import { test, expect } from "@playwright/test";
import consumerFromData from "../../data/consumerFromData.json";
import HomePage from "../../pages/commonPage/homePage.js";
import ConsumerRegistionPage from "../../pages/consumerPage/consumerPage.js";
import { CONSUMER_RESGISTRATION_URL } from "../../data/Constant/constent.js";

test.describe("Consumer Details and Registration Page Validation", () => {
  let page;
  let homePage;
  let consumerRegistionPage;

  test.beforeEach(async ({ browser }) => {
    page = await browser.newPage();
    await page.goto("https://hyperdrive-qa.aexp.com/");
    homePage = new HomePage(page);
    await homePage.login("nthodeti", "Hyperdrive@UI@5814");
    await page.waitForLoadState("domcontentloaded");
  });
  
  const navigateToConsumerRegistration = async () => {
    await homePage.profile();
    await homePage.selectConsumer();
    await homePage.addnewRegistration();
    consumerRegistionPage = new ConsumerRegistionPage(page);
  };

  consumerFromData.forEach(({ description, data, expected }) => {
    test(description, async () => {
      const randomSuffix = Math.floor(Math.random() * 1000 + 1);
      await navigateToConsumerRegistration();
      
      // Registering a new consumer
      await consumerRegistionPage.registerNewConsumer(
        `${data.name}${randomSuffix}`,
        data.name,
        data.description,
        data.readWriteGroup,
        data.emailDlAddress
      );

      await page.waitForTimeout(2000);
      await validateConsumerRegistration(expected.validationType);
    });
  });

  const validateConsumerRegistration = async (validationType) => {
    const validationMessages = {
      success: async () => {
        await expect.soft(page).toHaveURL("https://hyperdrive-qa.aexp.com/consumer/addparticipant");
        //await expect.soft(page).toHaveURL("https://hyperdrive-dev.aexp.com/consumer/dashboard/addparticipant");
      },
      "Name is too long": async () => {
        await validateErrorMessage(await consumerRegistionPage.getLongConsumerNameError(), "Name is too long");
      },
      "Description is too long": async () => {
        await validateErrorMessage(await consumerRegistionPage.getLongDescriptionError(), "Description is too long");
      },
      "Email should be @aexp.com": async () => {
        await validateErrorMessage(await consumerRegistionPage.getInvalidEmailError(), "Email should be @aexp.com");
      },
      "Invalid IIQ Group": async () => {
        await validateErrorMessage(await consumerRegistionPage.getInvalidIIQGroupError(), "Group ID not found in IIQ.");
      },
      "Group ID not found in IIQ": async () => {
        await validateErrorMessage(await consumerRegistionPage.getInvalidIIQGroupError(), "Group ID not found in IIQ.");
      },
      "Value cannot be empty": async () => {
        await validateErrorMessage(await consumerRegistionPage.getValueCannotBeEmptyError(), "The value cannot be empty.");
      },
    };

    if (validationMessages[validationType]) {
      await validationMessages[validationType]();
    } else {
      throw new Error(`Unhandled validation type: ${validationType}`);
    }
  };

  const validateErrorMessage = async (actualMessage, expectedMessage) => {
    console.log("Actual message:", actualMessage);
    await expect.soft(actualMessage).toContain(expectedMessage);
  };

  test("Verify user action menu", async () => {
    await homePage.profile();
    await homePage.userActionMenuButtonVisiable();
  });

  test("Verified background color", async () => {
    const homePage = new HomePage(page);
    const consumerRegistionPage = new ConsumerRegistionPage(page);
    await homePage.profile();
    await homePage.selectConsumer();
    await homePage.addnewRegistration();
    navigateToConsumerRegistration();
    await consumerRegistionPage.carIdLocator.fill("500000138");
    await consumerRegistionPage.carIdValidateLocator.click();
    await page.waitForTimeout(2000);
    const element = await consumerRegistionPage.carId_Color;
    await homePage.backGroundColor(element); //*[name()='svg']/parent::span/parent::button/preceding::input[@id='carId']
  });

  test("Verified validate buttons before producer regisatraion", async () => {
    const homePage = new HomePage(page);
    const consumerRegistionPage = new ConsumerRegistionPage(page);
    await homePage.profile();
    await homePage.selectProducer();
    await homePage.addnewRegistration();
    const count = await consumerRegistionPage.validatebtn_Loc.count();
    console.log("tolal number of disable validate buttons.....:-  ", count);
    for (let i = 0; i < count; i++) {
      await expect
        .soft(consumerRegistionPage.validatebtn_Loc.nth(i))
        .toBeDisabled();
    }
    await expect.soft(consumerRegistionPage.submitBtnLocator).toBeDisabled();
  });

  

  test("Verified background color of Name ", async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.consumerName.fill("Test0009");
    await consumerRegistionPage.locators.nameValidateBtn.click();
    await consumerRegistionPage.locators.Name_Color.click();
    const element = await consumerRegistionPage.locators.Name_Color;
    await homePage.backGroundColor(element);
  });


  // test('Verify Profile Menu Click', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.profileMenu.click();
  //   const element = await consumerRegistionPage.locators.profileMenu;
  //   await homePage.verifyElement(element);
  // });

  // test("Verified validate buttons before producer regisatraion", async () => {
  //   const homePage = new HomePage(page);
  //   const consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await homePage.profile();
  //   await homePage.selectConsumer();
  //   await homePage.addnewRegistration();
  //   const count = await consumerRegistionPage.validatebtn_Loc.count();
  //   console.log("tolal number of disable validate buttons.....:-  ", count);
  //   for (let i = 0; i < count; i++) {
  //     await expect
  //       .soft(consumerRegistionPage.validatebtn_Loc.nth(i))
  //       .toBeDisabled();
  //   }
  //   await expect.soft(consumerRegistionPage.submitBtnLocator).toBeDisabled();
  // });
  
  // test("Verified Passing empty name", async () => {
  //   const homePage = new HomePage(page);
  //   const consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await homePage.profile();
  //   await homePage.selectConsumer();
  //   await homePage.addnewRegistration();
  //   await consumerRegistionPage.consumerName.fill("  "),
  //   await consumerRegistionPage.nameValidateBtn.click();
  //   await expect
  //     .soft(consumerRegistionPage.valueCannotBeEmpty_Loc)
  //     .toBeVisible();
  // });

  // test('Verify Consumer Option Selection', async () => {
  //   const homePage = new HomePage(page);
  //   const consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await homePage.profile();
  //   await homePage.selectConsumer();
  //   await homePage.addnewRegistration();
  //   await consumerRegistionPage.locators.consumerOption.click()
  //   const element = await consumerRegistionPage.locators.consumerOption;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Add New Registration Click', async () => {
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.locators.consumerOption.click()
  //   await consumerRegistionPage.locators.addNewRegistration.click();
  //   const element = await consumerRegistionPage.locators.addNewRegistration;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Name Label Interaction', async () => {
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.locators.nameLabel.click();
  //   const element = await consumerRegistionPage.locators.nameLabel;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Name Help Text Interaction', async () => {
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.locators.nameHelpText.click();
  //   const element = await consumerRegistionPage.locators.nameHelpText;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Description Field Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.descriptionField.click();
  //   const element = await consumerRegistionPage.locators.descriptionField;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Description Label Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.descriptionLabel.click();
  //   const element = await consumerRegistionPage.locators.descriptionLabel;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Read Write Group Field Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.readWriteGroupField.click();
  //   const element = await consumerRegistionPage.locators.readWriteGroupField;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Read Write Group Label Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.readWriteGroupLabel.click();
  //   const element = await consumerRegistionPage.locators.readWriteGroupLabel;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Email Field Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.emailField.click();
  //   const element = await consumerRegistionPage.locators.emailField;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Email Label Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.emailLabel.click();
  //   const element = await consumerRegistionPage.locators.emailLabel;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Submit Button Click', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.submitButton.click();
  //   const element = await consumerRegistionPage.locators.submitButton;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Cancel Button Click', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.cancelButton.click();
  //   const element = await consumerRegistionPage.locators.cancelButton;
  //   await homePage.verifyElement(element);
  // });

  // test('Verify Name Counter Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.nameCounter.click();
  //   const element = await consumerRegistionPage.locators.nameCounter;
  //   await homePage.verifyElement(element);
  // });
  // test('Verify Validation Icon Interaction', async () => {
  //   consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await consumerRegistionPage.locators.validationIcon.click();
  //   const element = await consumerRegistionPage.locators.validationIcon;
  //   await homePage.verifyElement(element);
  // }); 

  // test('Verify that the Show Details/Hide Details button is working and displaying respective content', async()=>{
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.checkShowHideButtonFunctionality();            
  //  })

  // test('Verify the change of state of validate button when clicked after giving a proper name', async()=>{
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.consumerName.fill('Auto'+Math.floor(Math.random*1000));
  //   await consumerRegistionPage.nameValidateBtn.click();    
  //   await expect(consumerRegistionPage.nameValidationGreenTickMarkLocator).toBeVisible();
  //  }); 

  // test('Verify the change of state of validate button when clicked after giving a proper IIQ Group', async()=>{
  //   navigateToConsumerRegistration();
  //   await consumerRegistionPage.iiqGroupLocator.fill('gg-hyperdrive-feature-tester');
  //   await consumerRegistionPage.iiqGroupValidateLocator.click();    
  //   await expect(consumerRegistionPage.iiqGroupValidatetickmarkLocator).toBeVisible();
  //  });

  // test('Verify that Validate Buttons and Register Button were intially in disabled state before entering any details', async()=>{
  //   const consumerRegistionPage = new ConsumerRegistionPage(page);
  //   await expect (consumerRegistionPage.nameValidateLocator).toHaveAttribute('Disabled');
  //   await expect (consumerRegistionPage.iiqGroupValidateLocator).toHaveAttribute('Disabled');
  //   await expect (consumerRegistionPage.registerButtonLocator).toHaveAttribute('Disabled');
  //  })  

  test.afterEach(async () => {
    await homePage.quit();
  });
  

});
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

import { test, expect } from "@playwright/test";
import consumerFromData from "../../data/consumerFromData.json";
import HomePage from "../../pages/commonPage/homePage.js";
import ConsumerRegistionPage from "../../pages/consumerPage/consumerPage.js";
import { CONSUMER_RESGISTRATION_URL } from "../../data/Constant/constent.js";

// Test Configuration
const TEST_CONFIG = {
  baseUrl: "https://hyperdrive-qa.aexp.com",
  credentials: {
    username: "nthodeti",
    password: "Hyperdrive@UI@5814"
  },
  testData: {
    carId: "500000138",
    testName: "Test0009",
    iiqGroup: "gg-hyperdrive-feature-tester"
  },
  waitTimes: {
    default: 2000,
    networkIdle: 5000
  }
};

test.describe("Consumer Details and Registration Page Validation", () => {
  let page;
  let homePage;
  let consumerRegistionPage;

  // Test Setup
  test.beforeEach(async ({ browser }) => {
    page = await browser.newPage();
    await page.goto(TEST_CONFIG.baseUrl);
    homePage = new HomePage(page);
    await homePage.login(
      TEST_CONFIG.credentials.username,
      TEST_CONFIG.credentials.password
    );
    await page.waitForLoadState("domcontentloaded");
  });

  // Navigation Helper
  const navigateToConsumerRegistration = async () => {
    await homePage.profile();
    await homePage.selectConsumer();
    await homePage.addnewRegistration();
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await page.waitForLoadState("networkidle");
    await page.waitForTimeout(TEST_CONFIG.waitTimes.networkIdle);
  };

  // Data-Driven Tests
  consumerFromData.forEach(({ description, data, expected }) => {
    test(`Data-Driven: ${description}`, async () => {
      const randomSuffix = Math.floor(Math.random() * 1000 + 1);
      await navigateToConsumerRegistration();
      
      await consumerRegistionPage.registerNewConsumer(
        `${data.name}${randomSuffix}`,
        data.name,
        data.description,
        data.readWriteGroup,
        data.emailDlAddress
      );

      await page.waitForTimeout(TEST_CONFIG.waitTimes.default);
      await validateConsumerRegistration(expected.validationType);
    });
  });

  // Validation Helpers
  const validateConsumerRegistration = async (validationType) => {
    const validationMessages = {
      success: async () => {
        await expect.soft(page).toHaveURL(`${TEST_CONFIG.baseUrl}/consumer/addparticipant`);
      },
      "Name is too long": async () => {
        await validateErrorMessage(
          await consumerRegistionPage.getLongConsumerNameError(),
          "Name is too long"
        );
      },
      "Description is too long": async () => {
        await validateErrorMessage(
          await consumerRegistionPage.getLongDescriptionError(),
          "Description is too long"
        );
      },
      "Email should be @aexp.com": async () => {
        await validateErrorMessage(
          await consumerRegistionPage.getInvalidEmailError(),
          "Email should be @aexp.com"
        );
      },
      "Invalid IIQ Group": async () => {
        await validateErrorMessage(
          await consumerRegistionPage.getInvalidIIQGroupError(),
          "Group ID not found in IIQ."
        );
      },
      "Group ID not found in IIQ": async () => {
        await validateErrorMessage(
          await consumerRegistionPage.getInvalidIIQGroupError(),
          "Group ID not found in IIQ."
        );
      },
      "Value cannot be empty": async () => {
        await validateErrorMessage(
          await consumerRegistionPage.getValueCannotBeEmptyError(),
          "The value cannot be empty."
        );
      },
    };

    if (validationMessages[validationType]) {
      await validationMessages[validationType]();
    } else {
      throw new Error(`Unhandled validation type: ${validationType}`);
    }
  };

  const validateErrorMessage = async (actualMessage, expectedMessage) => {
    console.log("Actual message:", actualMessage);
    await expect.soft(actualMessage).toContain(expectedMessage);
  };

  // Individual Test Cases
  test("Verify user action menu visibility", async () => {
    await homePage.profile();
    await homePage.userActionMenuButtonVisiable();
  });

  test("Verify background color of CAR ID field", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.carIdLocator.fill(TEST_CONFIG.testData.carId);
    await consumerRegistionPage.carIdValidateLocator.click();
    await page.waitForTimeout(TEST_CONFIG.waitTimes.default);
    const element = await consumerRegistionPage.carId_Color;
    await homePage.backGroundColor(element);
  });

  test("Verify validate buttons are disabled before producer registration", async () => {
    await homePage.profile();
    await homePage.selectProducer();
    await homePage.addnewRegistration();
    consumerRegistionPage = new ConsumerRegistionPage(page);
    
    await page.waitForSelector(consumerRegistionPage.validatebtn_Loc);
    const count = await consumerRegistionPage.validatebtn_Loc.count();
    console.log("Total number of disabled validate buttons:", count);
    
    for (let i = 0; i < count; i++) {
      await expect
        .soft(consumerRegistionPage.validatebtn_Loc.nth(i))
        .toBeDisabled();
    }
    await expect.soft(consumerRegistionPage.submitBtnLocator).toBeDisabled();
  });

  test("Verify background color of Name field", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.consumerName.fill(TEST_CONFIG.testData.testName);
    await consumerRegistionPage.locators.nameValidateBtn.click();
    await consumerRegistionPage.locators.Name_Color.click();
    const element = await consumerRegistionPage.locators.Name_Color;
    await homePage.backGroundColor(element);
  });

  test("Verify Profile Menu Click functionality", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.profileMenu.click();
    const element = await consumerRegistionPage.locators.profileMenu;
    await homePage.verifyElement(element);
  });

  test("Verify validate buttons are disabled before consumer registration", async () => {
    await navigateToConsumerRegistration();
    const count = await consumerRegistionPage.validatebtn_Loc.count();
    console.log("Total number of disabled validate buttons:", count);
    
    for (let i = 0; i < count; i++) {
      await expect
        .soft(consumerRegistionPage.validatebtn_Loc.nth(i))
        .toBeDisabled();
    }
    await expect.soft(consumerRegistionPage.submitBtnLocator).toBeDisabled();
  });
  
  test("Verify validation error when passing empty name", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.consumerName.fill("  ");
    await consumerRegistionPage.nameValidateBtn.click();
    await expect
      .soft(consumerRegistionPage.valueCannotBeEmpty_Loc)
      .toBeVisible();
  });

  test("Verify Consumer Option Selection", async () => {
    await homePage.profile();
    await homePage.selectConsumer();
    await homePage.addnewRegistration();
    await consumerRegistionPage.locators.consumerOption.click();
    const element = await consumerRegistionPage.locators.consumerOption;
    await homePage.verifyElement(element);
  });

  test("Verify Add New Registration Click", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.consumerOption.click();
    await consumerRegistionPage.locators.addNewRegistration.click();
    const element = await consumerRegistionPage.locators.addNewRegistration;
    await homePage.verifyElement(element);
  });

  test("Verify Name Label Interaction", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.nameLabel.click();
    const element = await consumerRegistionPage.locators.nameLabel;
    await homePage.verifyElement(element);
  });

  test("Verify Name Help Text Interaction", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.nameHelpText.click();
    const element = await consumerRegistionPage.locators.nameHelpText;
    await homePage.verifyElement(element);
  });

  test("Verify Description Field Interaction", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.descriptionField.click();
    const element = await consumerRegistionPage.locators.descriptionField;
    await homePage.verifyElement(element);
  });

  test("Verify Description Label Interaction", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.descriptionLabel.click();
    const element = await consumerRegistionPage.locators.descriptionLabel;
    await homePage.verifyElement(element);
  });

  test("Verify Read Write Group Field Interaction", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.readWriteGroupField.click();
    const element = await consumerRegistionPage.locators.readWriteGroupField;
    await homePage.verifyElement(element);
  });

  test("Verify Read Write Group Label Interaction", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.readWriteGroupLabel.click();
    const element = await consumerRegistionPage.locators.readWriteGroupLabel;
    await homePage.verifyElement(element);
  });

  test("Verify Email Field Interaction", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.emailField.click();
    const element = await consumerRegistionPage.locators.emailField;
    await homePage.verifyElement(element);
  });

  test("Verify Email Label Interaction", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.emailLabel.click();
    const element = await consumerRegistionPage.locators.emailLabel;
    await homePage.verifyElement(element);
  });

  test("Verify Submit Button Click", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.submitButton.click();
    const element = await consumerRegistionPage.locators.submitButton;
    await homePage.verifyElement(element);
  });

  test("Verify Cancel Button Click", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.cancelButton.click();
    const element = await consumerRegistionPage.locators.cancelButton;
    await homePage.verifyElement(element);
  });

  test("Verify Name Counter Interaction", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.nameCounter.click();
    const element = await consumerRegistionPage.locators.nameCounter;
    await homePage.verifyElement(element);
  });

  test("Verify Validation Icon Interaction", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.validationIcon.click();
    const element = await consumerRegistionPage.locators.validationIcon;
    await homePage.verifyElement(element);
  }); 

  test("Verify Show Details/Hide Details button functionality", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.checkShowHideButtonFunctionality();            
  });

  test("Verify validate button state change after valid name input", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.consumerName.fill('Auto' + Math.floor(Math.random() * 1000));
    await consumerRegistionPage.nameValidateBtn.click();    
    await expect(consumerRegistionPage.nameValidationGreenTickMarkLocator).toBeVisible();
  }); 

  test("Verify validate button state change after valid IIQ Group input", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.iiqGroupLocator.fill(TEST_CONFIG.testData.iiqGroup);
    await consumerRegistionPage.iiqGroupValidateLocator.click();    
    await expect(consumerRegistionPage.iiqGroupValidatetickmarkLocator).toBeVisible();
  });

  test("Verify initial disabled state of Validate and Register buttons", async () => {
    await navigateToConsumerRegistration();
    await expect(consumerRegistionPage.nameValidateLocator).toHaveAttribute('disabled', '');
    await expect(consumerRegistionPage.iiqGroupValidateLocator).toHaveAttribute('disabled', '');
    await expect(consumerRegistionPage.registerButtonLocator).toHaveAttribute('disabled', '');
  });  

  // Test Cleanup
  test.afterEach(async () => {
    await homePage.quit();
  });
});

TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT


import { expect } from "@playwright/test";

class ConsumerRegistionPage {
  constructor(page) {
    this.page = page;

    // Locators
    this.locators = {
      consumerName: page.locator("#name"),
      nameValidateBtn: page.locator("//input[@id='name']//following-sibling::button"),
      nameValidationGreenTickMarkLocator : page.locator('//input[@name="name"][@id="name"]//following-sibling::button[@aria-label ="Validate"]/span'),
      Name_Color: page.locator("span[class='display-block css-ab09iz'] svg"),
      readWriteGroup: page.locator("#readWriteGroup"),
      readWriteGroupValidateBtn: page.locator("//input[@id='readWriteGroup']//following-sibling::button"),
      description: page.locator("#description"),
      emailDlAddress: page.locator("#emailDlAddress"),
      cancelBtn: page.locator('[data-testid="cancelBtn"]'),
      submitBtn: page.locator('[data-testid="submitBtn"]'),
      longConsumerNameError: page.locator('//span[text()="Name is too long"]'),
      longDescriptionError: page.locator('//span[text()="Description is too long"]'),
      invalidIIQGroupError: page.locator('//div/span[text()="Group ID not found in IIQ."]'),
      invalidEmailError: page.locator('//div/span[text()="Email should be @aexp.com"]'),
      valueCannotBeEmptyError: page.locator('//span[text()="The value cannot be empty."]'),
      consumerHeader: page.locator('//h4[normalize-space()="Consumer Dashboard"]'),
      section3: page.locator('[data-testid="section3"]'),
      validatebtn_Loc: page.locator('[aria-label="Validate"]'),
      nameValidateLocator: page.locator("//input[@id='name']//following-sibling::button"),
      iiqGroupValidateLocator:page.locator("//input[@id='readWriteGroup']//following-sibling::button"),
      registerButtonLocator : page.locator('//button[@data-testid="cancelBtn"]/following-sibling::button'),
      iiqGroupLocator : page.locator("#readWriteGroup"),
      submitBtnLocator :page.locator('[data-testid="submitBtn"]'),
      validatebtn_Loc: page.locator('[aria-label="Validate"]'),
      iiqGroupValidatetickmarkLocator : page.locator('//input[@name="readWriteGroup"][@id="readWriteGroup"]//following-sibling::button[@aria-label ="Validate"]/span'),
      showHideDetailsButtonLocator : page.locator('//a[@role="button" and text()="Show Details"]'),
      valueCannotBeEmpty_Loc : page.locator('xpath = //span[text()="Value cannot be empty"]'),
      carIdValidateLocator : page.locator("//input[@id='carId']//following-sibling::button"),
      carId_Color : page.locator("//input[@id='carId']/following-sibling::button/span"),
      validatebtn_Loc: page.locator('[aria-label="Validate"]'),
      validatebtn_Loc : page.locator('[aria-label="Validate"]'),
      submitBtnLocator :page.locator('[data-testid="submitBtn"]'),

//******************************************************************************* */
      profileMenu: page.locator("#profile-menu"),
      consumerOption: page.locator("text=Consumer"),
      addNewRegistration: page.locator("text=Add New Registration"),
      nameField: page.locator("#name"),
      nameLabel: page.locator("label[for='name']"),
      nameHelpText: page.locator("#name-helper-text"),
      nameValidateBtn: page.locator("//input[@id='name']//following-sibling::button"),
      descriptionField: page.locator("#description"),
      descriptionLabel: page.locator("label[for='description']"),
      readWriteGroupField: page.locator("#readWriteGroup"),
      readWriteGroupLabel: page.locator("label[for='readWriteGroup']"),
      emailField: page.locator("#emailDlAddress"),
      emailLabel: page.locator("label[for='emailDlAddress']"),
      submitButton: page.locator('[data-testid="submitBtn"]'),
      cancelButton: page.locator('[data-testid="cancelBtn"]'),
      nameCounter: page.locator("//span[normalize-space()='4']"),
      validationIcon: page.locator("(//span[@class='display-block css-ab09iz'])[1]"),
      errorMessage: page.locator(".error-message"),
      successMessage: page.locator(".success-message"),
      emptyField: page.locator('//span[text()="The value cannot be empty"]'),
      nameTooLong: page.locator('//span[text()="Name is too long"]'),
      invalidEmail: page.locator('//div/span[text()="Email should be @aexp.com"]'),
      invalidGroup: page.locator('//div/span[text()="Group ID not found in IIQ"]')


    };
  }

  
  async registerNewConsumer(name, description, readWriteGroup, emailDlAddress) {
    await this.fillConsumerDetails(name, description, readWriteGroup, emailDlAddress);
    await this.locators.section3.click();
    await this.page.waitForTimeout(1000);
  }

  async fillConsumerDetails(name, description, readWriteGroup, emailDlAddress) {
    await this.locators.consumerName.fill(name);
    await this.locators.nameValidateBtn.click();
    await this.locators.description.fill(description);
    await this.page.waitForTimeout(1000);
    await this.locators.readWriteGroup.fill(readWriteGroup);
    await this.locators.readWriteGroupValidateBtn.click();
    await this.page.waitForTimeout(1000);
    await this.locators.emailDlAddress.fill(emailDlAddress);
  }

  async clickSubmit() {
    await this.locators.submitBtn.click();
  }

  async clickCancel() {
    await this.locators.cancelBtn.click();
  }
  async consumerName() {
    await this.locators.consumerName.click();
  }

  
  async getErrorMessage(locator) {
    await this.page.waitForSelector(locator);
    return await this.page.locator(locator).innerText();
  }

  async getLongConsumerNameError() {
    return await this.getErrorMessage('//span[text()="Name is too long"]');
  }

  async getLongDescriptionError() {
    return await this.getErrorMessage('//span[text()="Description is too long"]');
  }

  async getInvalidEmailError() {
    return await this.getErrorMessage('//div/span[text()="Email should be @aexp.com"]');
  }

  async getInvalidIIQGroupError() {
    return await this.getErrorMessage('//div/span[text()="Group ID not found in IIQ."]');
  }

  async getValueCannotBeEmptyError() {
    return await this.getErrorMessage('//span[text()="The value cannot be empty."]');
  }

  async expectConsumerHeaderToBeVisible() {
    await expect(this.locators.consumerHeader).toBeVisible();
    await expect(this.locators.consumerHeader).toContainText("Consumer Dashboard");
  }

  async getRegistrationParagraphText(selectors) {
    return await Promise.all(selectors.map(selector => selector.innerText()));
  }

  async checkShowHideButtonFunctionality() {
    await this.page.locator(this.showHideDetailsButtonLocator.click());
    await expect(this.page.locator(this.showHideDetailsContentLocator1)).toBeVisible();
    await expect(this.page.locator(this.showHideDetailsContentLocator2)).toBeVisible();
    await expect(this.page.locator(this.showHideDetailsContentLocator3)).toBeVisible();
    await expect(this.page.locator(this.showHideDetailsContentLocator4)).toBeVisible();
    await expect(this.page.locator(this.showHideDetailsContentLocator5)).toBeVisible();
  }

    // Work done
    async commonmethod() {        
      if (MaxCharCount< inputChar) {
        expect(await this.page.locator('//label[@for = "name"]/parent::div//span').nth(1)).toContainText("Name is too long");
      }
      else if (await MaxCharCount >= await inputChar) {
        await this.page.waitForTimeout(2000);
      }
    }
}

export default ConsumerRegistionPage;

ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss
import { test, expect } from "@playwright/test";
import HomePage from "../../pages/commonPage/homePage.js";
import ConsumerRegistionPage from "../../pages/consumerPage/consumerPage.js";

test.describe("Consumer Details and Registration Page Validation", () => {
  let page;
  let homePage;
  let consumerRegistionPage;

  test.beforeEach(async ({ browser }) => {
    page = await browser.newPage();
    await page.goto("https://hyperdrive-qa.aexp.com/");
    homePage = new HomePage(page);
    await homePage.login("nthodeti", "Hyperdrive@UI@5814");
    await page.waitForLoadState("domcontentloaded");
  });

  const navigateToConsumerRegistration = async () => {
    await homePage.profile();
    await homePage.selectConsumer();
    await homePage.addnewRegistration();
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await page.waitForLoadState("networkidle");
    await page.waitForTimeout(2000);
  };

  test("Verify successful consumer registration", async () => {
    await navigateToConsumerRegistration();
    
    await consumerRegistionPage.registerNewConsumer(
      "TestConsumer123",
      "Test Consumer Description",
      "GG-HYPERDRIVE-FEATURE-TESTER",
      "test@aexp.com"
    );

    await expect(page).toHaveURL("https://hyperdrive-qa.aexp.com/consumer/addparticipant");
  });

  test("Verify name too long validation", async () => {
    await navigateToConsumerRegistration();
    
    await consumerRegistionPage.locators.consumerName.fill("a".repeat(101));
    await consumerRegistionPage.locators.nameValidateBtn.click();
    
    const error = await consumerRegistionPage.getLongConsumerNameError();
    await expect(error).toContain("Name is too long");
  });

  test("Verify background color of CAR ID field", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.carIdLocator.fill("500000138");
    await consumerRegistionPage.locators.carIdValidateLocator.click();
    await page.waitForTimeout(2000);
    const element = await consumerRegistionPage.locators.carId_Color;
    await homePage.backGroundColor(element);
  });

  test("Verify validate buttons are disabled before producer registration", async () => {
    await homePage.profile();
    await homePage.selectProducer();
    await homePage.addnewRegistration();
    consumerRegistionPage = new ConsumerRegistionPage(page);
    
    const count = await consumerRegistionPage.locators.validatebtn_Loc.count();
    for (let i = 0; i < count; i++) {
      await expect(consumerRegistionPage.locators.validatebtn_Loc.nth(i)).toBeDisabled();
    }
    await expect(consumerRegistionPage.locators.submitBtnLocator).toBeDisabled();
  });

  test("Verify empty name validation", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.consumerName.fill("  ");
    await consumerRegistionPage.locators.nameValidateBtn.click();
    await expect(consumerRegistionPage.locators.valueCannotBeEmpty_Loc).toBeVisible();
  });

  test("Verify valid name shows green tick", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.consumerName.fill("ValidName123");
    await consumerRegistionPage.locators.nameValidateBtn.click();
    await expect(consumerRegistionPage.locators.nameValidationGreenTickMarkLocator).toBeVisible();
  });

  test("Verify invalid email validation", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.emailDlAddress.fill("invalid@email.com");
    await expect(consumerRegistionPage.locators.invalidEmail).toBeVisible();
  });

  test("Verify valid IIQ Group shows green tick", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.iiqGroupLocator.fill("gg-hyperdrive-feature-tester");
    await consumerRegistionPage.locators.iiqGroupValidateLocator.click();
    await expect(consumerRegistionPage.locators.iiqGroupValidatetickmarkLocator).toBeVisible();
  });

  test("Verify all form elements are interactable", async () => {
    await navigateToConsumerRegistration();
    
    // Name field
    await consumerRegistionPage.locators.consumerName.fill("TestName");
    await expect(consumerRegistionPage.locators.consumerName).toHaveValue("TestName");
    
    // Description field
    await consumerRegistionPage.locators.description.fill("Test Description");
    await expect(consumerRegistionPage.locators.description).toHaveValue("Test Description");
    
    // Read/Write Group field
    await consumerRegistionPage.locators.readWriteGroup.fill("test-group");
    await expect(consumerRegistionPage.locators.readWriteGroup).toHaveValue("test-group");
    
    // Email field
    await consumerRegistionPage.locators.emailDlAddress.fill("test@aexp.com");
    await expect(consumerRegistionPage.locators.emailDlAddress).toHaveValue("test@aexp.com");
    
    // Buttons
    await expect(consumerRegistionPage.locators.submitButton).toBeVisible();
    await expect(consumerRegistionPage.locators.cancelButton).toBeVisible();
  });

  test("Verify Show/Hide Details functionality", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.checkShowHideButtonFunctionality();
  });

  test.afterEach(async () => {
    await homePage.quit();
  });
});
kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk
// @ts-check
const { test, expect } = require('@playwright/test');

test.describe('Consumer Registration Form UI Tests', () => {
  let locators;

  test.beforeEach(async ({ page }) => {
    await page.goto('https://your-app-url.com'); // Replace with actual URL
    await page.click('#profile-menu');
    await page.click('text=Consumer');
    await page.click('text=Add New Registration');

    locators = {
      name: page.locator('#name'),
      nameValidateBtn: page.locator("//input[@id='name']//following-sibling::button"),
      nameValidationTick: page.locator("//input[@name='name'][@id='name']//following-sibling::button[@aria-label='Validate']/span"),
      nameTooLongError: page.locator("//span[text()='Name is too long']"),
      nameEmptyError: page.locator("//span[text()='The value cannot be empty.']"),

      description: page.locator('#description'),
      descriptionTooLongError: page.locator("//span[text()='Description is too long']"),

      group: page.locator('#readWriteGroup'),
      groupValidateBtn: page.locator("//input[@id='readWriteGroup']//following-sibling::button"),
      groupValidationTick: page.locator("//input[@name='readWriteGroup'][@id='readWriteGroup']//following-sibling::button[@aria-label='Validate']/span"),
      groupInvalidError: page.locator("//div/span[text()='Group ID not found in IIQ.']"),

      email: page.locator('#emailDlAddress'),
      emailInvalidError: page.locator("//div/span[text()='Email should be @aexp.com']"),

      submit: page.locator('[data-testid="submitBtn"]'),
      cancel: page.locator('[data-testid="cancelBtn"]'),
      dashboardHeader: page.locator('//h4[normalize-space()="Consumer Dashboard"]'),
    };
  });

  // ---------- NAME FIELD TESTS ----------
  for (let i = 1; i <= 10; i++) {
    test(`Name Field Test #${i}`, async ({ page }) => {
      if (i === 1) {
        await locators.name.click();
        await page.keyboard.press('Tab');
        await expect(locators.nameEmptyError).toBeVisible();
      } else if (i === 2) {
        await locators.name.fill('Valid Name');
        await locators.nameValidateBtn.click();
        await expect(locators.nameValidationTick).toBeVisible();
      } else if (i === 3) {
        await locators.name.fill('A'.repeat(101));
        await locators.nameValidateBtn.click();
        await expect(locators.nameTooLongError).toBeVisible();
      } else {
        await locators.name.fill(`Test Name ${i}`);
        await locators.nameValidateBtn.click();
        await expect(locators.name).toHaveValue(`Test Name ${i}`);
      }
    });
  }

  // ---------- DESCRIPTION FIELD TESTS ----------
  for (let i = 1; i <= 10; i++) {
    test(`Description Field Test #${i}`, async ({ page }) => {
      if (i === 1) {
        await locators.description.fill('This is a valid description.');
        await expect(locators.description).toHaveValue('This is a valid description.');
      } else if (i === 2) {
        await locators.description.fill('');
        await expect(locators.description).toHaveValue('');
      } else if (i === 3) {
        await locators.description.fill('D'.repeat(501));
        await expect(locators.descriptionTooLongError).toBeVisible();
      } else {
        await locators.description.fill(`Description ${i}`);
        await expect(locators.description).toHaveValue(`Description ${i}`);
      }
    });
  }

  // ---------- GROUP FIELD TESTS ----------
  for (let i = 1; i <= 10; i++) {
    test(`Group Field Test #${i}`, async ({ page }) => {
      if (i === 1) {
        await locators.group.fill('ValidGroup');
        await locators.groupValidateBtn.click();
        await expect(locators.groupValidationTick).toBeVisible();
      } else if (i === 2) {
        await locators.group.fill('FakeGroup123');
        await locators.groupValidateBtn.click();
        await expect(locators.groupInvalidError).toBeVisible();
      } else if (i === 3) {
        await locators.group.click();
        await page.keyboard.press('Tab');
        await expect(locators.nameEmptyError).toBeVisible();
      } else {
        await locators.group.fill(`Group${i}`);
        await locators.groupValidateBtn.click();
        await expect(locators.group).toHaveValue(`Group${i}`);
      }
    });
  }

  // ---------- EMAIL FIELD TESTS ----------
  for (let i = 1; i <= 10; i++) {
    test(`Email Field Test #${i}`, async ({ page }) => {
      if (i === 1) {
        await locators.email.fill('user@aexp.com');
        await expect(locators.email).toHaveValue('user@aexp.com');
      } else if (i === 2) {
        await locators.email.fill('user@gmail.com');
        await locators.submit.click();
        await expect(locators.emailInvalidError).toBeVisible();
      } else if (i === 3) {
        await locators.email.click();
        await page.keyboard.press('Tab');
        await expect(locators.nameEmptyError).toBeVisible();
      } else {
        await locators.email.fill(`user${i}@aexp.com`);
        await expect(locators.email).toHaveValue(`user${i}@aexp.com`);
      }
    });
  }

  // ---------- SUBMIT / CANCEL BUTTON TESTS ----------
  for (let i = 1; i <= 10; i++) {
    test(`Form Submission Test #${i}`, async ({ page }) => {
      if (i === 1) {
        await expect(locators.submit).toBeDisabled();
      } else if (i === 2) {
        await locators.name.fill('Valid Name');
        await locators.group.fill('ValidGroup');
        await locators.email.fill('user@aexp.com');
        await expect(locators.submit).toBeEnabled();
      } else if (i === 3) {
        await locators.cancel.click();
        await expect(locators.dashboardHeader).toBeVisible();
      } else {
        await locators.name.fill(`Valid Name ${i}`);
        await locators.group.fill(`Group${i}`);
        await locators.email.fill(`user${i}@aexp.com`);
        await locators.submit.click();
      }
    });
  }
});

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

// @ts-check
const { test, expect } = require('@playwright/test');

test.describe('Consumer Registration Form UI Tests', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('https://your-app-url.com'); // Replace with actual URL
    await page.click('#profile-menu');
    await page.click('text=Consumer');
    await page.click('text=Add New Registration');
  });

  const generateTests = (field, count, testFn) => {
    for (let i = 1; i <= count; i++) {
      test(`${field} Field Test #${i}`, async ({ page }) => {
        await testFn(page, i);
      });
    }
  };

  // ---------- NAME FIELD TESTS ----------
  generateTests('Name', 20, async (page, i) => {
    const name = page.locator('#name');
    const validateBtn = page.locator("//input[@id='name']//following-sibling::button");
    const validationTick = page.locator("//input[@name='name'][@id='name']//following-sibling::button[@aria-label='Validate']/span");
    const tooLongError = page.locator("//span[text()='Name is too long']");
    const emptyError = page.locator("//span[text()='The value cannot be empty.']");

    if (i === 1) {
      await name.click();
      await page.keyboard.press('Tab');
      await expect(emptyError).toBeVisible();
    } else if (i === 2) {
      await name.fill('Valid Name');
      await validateBtn.click();
      await expect(validationTick).toBeVisible();
    } else if (i === 3) {
      await name.fill('A'.repeat(101));
      await validateBtn.click();
      await expect(tooLongError).toBeVisible();
    } else {
      const value = `Name ${i}`;
      await name.fill(value);
      await expect(name).toHaveValue(value);
    }
  });

  // ---------- DESCRIPTION FIELD TESTS ----------
  generateTests('Description', 20, async (page, i) => {
    const description = page.locator('#description');
    const tooLongError = page.locator("//span[text()='Description is too long']");

    if (i === 1) {
      await description.fill('This is a valid description.');
      await expect(description).toHaveValue('This is a valid description.');
    } else if (i === 2) {
      await description.fill('');
      await expect(description).toHaveValue('');
    } else if (i === 3) {
      await description.fill('D'.repeat(501));
      await expect(tooLongError).toBeVisible();
    } else {
      const value = `Description test ${i}`;
      await description.fill(value);
      await expect(description).toHaveValue(value);
    }
  });

  // ---------- GROUP FIELD TESTS ----------
  generateTests('Group', 20, async (page, i) => {
    const group = page.locator('#readWriteGroup');
    const validateBtn = page.locator("//input[@id='readWriteGroup']//following-sibling::button");
    const validationTick = page.locator("//input[@name='readWriteGroup'][@id='readWriteGroup']//following-sibling::button[@aria-label='Validate']/span");
    const invalidError = page.locator("//div/span[text()='Group ID not found in IIQ.']");
    const emptyError = page.locator("//span[text()='The value cannot be empty.']");

    if (i === 1) {
      await group.fill('ValidGroup');
      await validateBtn.click();
      await expect(validationTick).toBeVisible();
    } else if (i === 2) {
      await group.fill('FakeGroup123');
      await validateBtn.click();
      await expect(invalidError).toBeVisible();
    } else if (i === 3) {
      await group.click();
      await page.keyboard.press('Tab');
      await expect(emptyError).toBeVisible();
    } else {
      const value = `Group${i}`;
      await group.fill(value);
      await validateBtn.click();
      await expect(group).toHaveValue(value);
    }
  });

  // ---------- EMAIL FIELD TESTS ----------
  generateTests('Email', 20, async (page, i) => {
    const email = page.locator('#emailDlAddress');
    const invalidError = page.locator("//div/span[text()='Email should be @aexp.com']");
    const emptyError = page.locator("//span[text()='The value cannot be empty.']");
    const submit = page.locator('[data-testid="submitBtn"]');

    if (i === 1) {
      await email.fill('user@aexp.com');
      await expect(email).toHaveValue('user@aexp.com');
    } else if (i === 2) {
      await email.fill('user@gmail.com');
      await submit.click();
      await expect(invalidError).toBeVisible();
    } else if (i === 3) {
      await email.click();
      await page.keyboard.press('Tab');
      await expect(emptyError).toBeVisible();
    } else {
      const value = `user${i}@aexp.com`;
      await email.fill(value);
      await expect(email).toHaveValue(value);
    }
  });

  // ---------- SUBMIT / CANCEL BUTTON TESTS ----------
  generateTests('Submit', 20, async (page, i) => {
    const name = page.locator('#name');
    const group = page.locator('#readWriteGroup');
    const email = page.locator('#emailDlAddress');
    const submit = page.locator('[data-testid="submitBtn"]');
    const cancel = page.locator('[data-testid="cancelBtn"]');
    const dashboardHeader = page.locator('//h4[normalize-space()="Consumer Dashboard"]');

    if (i === 1) {
      await expect(submit).toBeDisabled();
    } else if (i === 2) {
      await name.fill('Valid Name');
      await group.fill('ValidGroup');
      await email.fill('user@aexp.com');
      await expect(submit).toBeEnabled();
    } else if (i === 3) {
      await cancel.click();
      await expect(dashboardHeader).toBeVisible();
    } else {
      await name.fill(`Valid Name ${i}`);
      await group.fill(`Group${i}`);
      await email.fill(`user${i}@aexp.com`);
      await submit.click();
      // Add form submission verification here as needed
    }
  });
});

