import { test, expect } from "@playwright/test";
import consumerFromData from "../../data/consumerFromData.json";
import HomePage from "../../pages/commonPage/homePage.js";
import ConsumerRegistionPage from "../../pages/consumerPage/consumerPage.js";
import { CONSUMER_RESGISTRATION_URL } from "../../data/Constant/constent.js";

test.describe("Consumer Details and Registration Page Validation", () => {
  let page;
  let homePage;
  let consumerRegistionPage;

  test.beforeEach(async ({ browser }) => {
    page = await browser.newPage();
    await page.goto("https://hyperdrive-qa.aexp.com/");
    homePage = new HomePage(page);
    await homePage.login("nthodeti", "Hyperdrive@UI@5814");
    await page.waitForLoadState("domcontentloaded");
  });
  
  const navigateToConsumerRegistration = async () => {
    await homePage.profile();
    await homePage.selectConsumer();
    await homePage.addnewRegistration();
    consumerRegistionPage = new ConsumerRegistionPage(page);
  };

  consumerFromData.forEach(({ description, data, expected }) => {
    test(description, async () => {
      const randomSuffix = Math.floor(Math.random() * 1000 + 1);
      await navigateToConsumerRegistration();
      
      // Registering a new consumer
      await consumerRegistionPage.registerNewConsumer(
        `${data.name}${randomSuffix}`,
        data.name,
        data.description,
        data.readWriteGroup,
        data.emailDlAddress
      );

      await page.waitForTimeout(2000);
      await validateConsumerRegistration(expected.validationType);
    });
  });

  const validateConsumerRegistration = async (validationType) => {
    const validationMessages = {
      success: async () => {
        await expect.soft(page).toHaveURL("https://hyperdrive-qa.aexp.com/consumer/addparticipant");
        //await expect.soft(page).toHaveURL("https://hyperdrive-dev.aexp.com/consumer/dashboard/addparticipant");
      },
      "Name is too long": async () => {
        await validateErrorMessage(await consumerRegistionPage.getLongConsumerNameError(), "Name is too long");
      },
      "Description is too long": async () => {
        await validateErrorMessage(await consumerRegistionPage.getLongDescriptionError(), "Description is too long");
      },
      "Email should be @aexp.com": async () => {
        await validateErrorMessage(await consumerRegistionPage.getInvalidEmailError(), "Email should be @aexp.com");
      },
      "Invalid IIQ Group": async () => {
        await validateErrorMessage(await consumerRegistionPage.getInvalidIIQGroupError(), "Group ID not found in IIQ.");
      },
      "Group ID not found in IIQ": async () => {
        await validateErrorMessage(await consumerRegistionPage.getInvalidIIQGroupError(), "Group ID not found in IIQ.");
      },
      "Value cannot be empty": async () => {
        await validateErrorMessage(await consumerRegistionPage.getValueCannotBeEmptyError(), "The value cannot be empty.");
      },
    };

    if (validationMessages[validationType]) {
      await validationMessages[validationType]();
    } else {
      throw new Error(`Unhandled validation type: ${validationType}`);
    }
  };

  const validateErrorMessage = async (actualMessage, expectedMessage) => {
    console.log("Actual message:", actualMessage);
    await expect.soft(actualMessage).toContain(expectedMessage);
  };

  test("Verify user action menu", async () => {
    await homePage.profile();
    await homePage.userActionMenuButtonVisiable();
  });

  test("Verified background color of Name ", async () => {
    await navigateToConsumerRegistration();
    await consumerRegistionPage.locators.consumerName.fill("Test0009");
    await consumerRegistionPage.locators.nameValidateBtn.click();
    await consumerRegistionPage.locators.Name_Color.click();
    const element = await consumerRegistionPage.locators.Name_Color;
    await homePage.backGroundColor(element);
  });


  test('Verify Profile Menu Click', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.profileMenu.click();
    const element = await consumerRegistionPage.locators.profileMenu;
    await homePage.verifyElement(element);
  });

  test('Verify Consumer Option Selection', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.consumerOption.click();
    const element = await consumerRegistionPage.locators.consumerOption;
    await homePage.verifyElement(element);
  });

  test('Verify Add New Registration Click', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.addNewRegistration.click();
    const element = await consumerRegistionPage.locators.addNewRegistration;
    await homePage.verifyElement(element);
  });

  test('Verify Name Label Interaction', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.nameLabel.click();
    const element = await consumerRegistionPage.locators.nameLabel;
    await homePage.verifyElement(element);
  });

  test('Verify Name Help Text Interaction', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.nameHelpText.click();
    const element = await consumerRegistionPage.locators.nameHelpText;
    await homePage.verifyElement(element);
  });

  test('Verify Description Field Interaction', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.descriptionField.click();
    const element = await consumerRegistionPage.locators.descriptionField;
    await homePage.verifyElement(element);
  });

  test('Verify Description Label Interaction', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.descriptionLabel.click();
    const element = await consumerRegistionPage.locators.descriptionLabel;
    await homePage.verifyElement(element);
  });

  test('Verify Read Write Group Field Interaction', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.readWriteGroupField.click();
    const element = await consumerRegistionPage.locators.readWriteGroupField;
    await homePage.verifyElement(element);
  });

  test('Verify Read Write Group Label Interaction', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.readWriteGroupLabel.click();
    const element = await consumerRegistionPage.locators.readWriteGroupLabel;
    await homePage.verifyElement(element);
  });

  test('Verify Email Field Interaction', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.emailField.click();
    const element = await consumerRegistionPage.locators.emailField;
    await homePage.verifyElement(element);
  });

  test('Verify Email Label Interaction', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.emailLabel.click();
    const element = await consumerRegistionPage.locators.emailLabel;
    await homePage.verifyElement(element);
  });

  test('Verify Submit Button Click', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.submitButton.click();
    const element = await consumerRegistionPage.locators.submitButton;
    await homePage.verifyElement(element);
  });

  test('Verify Cancel Button Click', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.cancelButton.click();
    const element = await consumerRegistionPage.locators.cancelButton;
    await homePage.verifyElement(element);
  });

  test('Verify Name Counter Interaction', async () => {
    consumerRegistionPage = new ConsumerRegistionPage(page);
    await consumerRegistionPage.locators.nameCounter.click();
    const element = await consumerRegistionPage.locators.nameCounter;
    await homePage.verifyElement(element);
  });

  test.afterEach(async () => {
    await homePage.quit();
  });
  

});

