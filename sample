Error: browser.newPage: Browser needs to be launched with the global proxy. If all contexts override the proxy, global proxy will be never used and can be any string, for example "launch({ proxy: { server: 'http://per-context' } })"

  119 | // Initialize page before all tests
  120 | test.beforeAll(async ({ browser }) => {
> 121 |   const page = await browser.newPage();
      |                              ^
  122 |   consumerPage = new ConsumerPage(page);
  123 | });
  124 |

    at C:\kiran\cep-test-automation\tests\consumerTestCase\consumerPageTest.spec.js:121:30
TypeError: Cannot read properties of undefined (reading 'page')

  198 | // Clean up after all tests
  199 | test.afterAll(async () => {
> 200 |   await consumerPage.page.close();
      |                      ^
  201 | });

    at C:\kiran\cep-test-automation\tests\consumerTestCase\consumerPageTest.spec.js:200:22

import { test, expect } from '@playwright/test';
import { testCases } from '../../data/consumerTestData.js';
import ConsumerPage from '../../pages/consumerPage/consumerPage.js';

// Configure test suite to run tests in serial mode
test.describe.configure({ mode: 'serial' });

let consumerPage;
let page;

// Initialize page before all tests
test.beforeAll(async ({ browser }) => {
  page = await browser.newPage();
  consumerPage = new ConsumerPage(page);
});

// Authentication Test Suite
test.describe('Authentication Tests', () => {
  test.beforeEach(async () => {
    await consumerPage.navigateTo('login');
  });

  testCases.authentication.forEach(testCase => {
    test(`[${testCase.id}] ${testCase.description}`, async () => {
      await consumerPage.performTestSteps(testCase.steps);
    });
  });
});

// Navigation Test Suite
test.describe('Navigation Tests', () => {
  test.beforeEach(async () => {
    // Ensure we're logged in for navigation tests
    await consumerPage.navigateTo('login');
    await consumerPage.login('valid');
  });

  testCases.navigation.forEach(testCase => {
    test(`[${testCase.id}] ${testCase.description}`, async () => {
      await consumerPage.performTestSteps(testCase.steps);
    });
  });
});

// Field Validation Test Suite
test.describe('Field Validation Tests', () => {
  test.beforeEach(async () => {
    await consumerPage.navigateTo('login');
    await consumerPage.login('valid');
    await consumerPage.navigateTo('registration');
  });

  testCases.fieldValidation.forEach(testCase => {
    test(`[${testCase.id}] ${testCase.description}`, async () => {
      await consumerPage.performTestSteps(testCase.steps);
    });
  });
});

// Form Submission Test Suite
test.describe('Form Submission Tests', () => {
  test.beforeEach(async () => {
    await consumerPage.navigateTo('login');
    await consumerPage.login('valid');
    await consumerPage.navigateTo('registration');
  });

  testCases.formSubmission.forEach(testCase => {
    test(`[${testCase.id}] ${testCase.description}`, async () => {
      await consumerPage.performTestSteps(testCase.steps);
    });
  });
});

// UI/UX Test Suite
test.describe('UI/UX Tests', () => {
  test.beforeEach(async () => {
    await consumerPage.navigateTo('login');
    await consumerPage.login('valid');
    await consumerPage.navigateTo('registration');
  });

  testCases.uiValidation.forEach(testCase => {
    test(`[${testCase.id}] ${testCase.description}`, async () => {
      await consumerPage.performTestSteps(testCase.steps);
    });
  });
});

// Clean up after all tests
test.afterAll(async () => {
  await page.close();
});

