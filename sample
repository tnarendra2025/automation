// Enhanced Playwright Tests with 50+ UI Test Cases (Updated with consumerFormData.json structure)
import { test, expect } from "@playwright/test";
import consumerFromData from "../../data/consumerFromData.json";
import HomePage from "../../pages/commonPage/homePage.js";
import ConsumerRegistionPage from "../../pages/consumerPage/consumerPage.js";

const randomName = (base = "Test") => `${base}${Math.floor(Math.random() * 10000)}`;

test.describe("[Consumer UI] - Registration Page Tests", () => {
  let page;
  let homePage;
  let consumerPage;

  test.beforeEach(async ({ browser }) => {
    page = await browser.newPage();
    await page.goto("https://hyperdrive-qa.aexp.com/");
    homePage = new HomePage(page);
    await homePage.login("nthodeti", "Hyperdrive@UI@5814");
    await homePage.profile();
    await homePage.selectConsumer();
    await homePage.addnewRegistration();
    consumerPage = new ConsumerRegistionPage(page);
  });

  test("01 - Validate all field headers and help text", async () => {
    expect(await consumerPage.locators.nameLabel.textContent()).toContain("Consumer Name");
    expect(await consumerPage.locators.nameHelpText.textContent()).toContain("This field is used to create");
    expect(await consumerPage.locators.descriptionLabel.textContent()).toContain("Description");
    expect(await consumerPage.locators.readWriteGroupLabel.textContent()).toContain("Read/Write Group ID");
    expect(await consumerPage.locators.emailLabel.textContent()).toContain("Email DL Address");
  });

  test("02 - Validate name min and max length", async () => {
    await consumerPage.fillConsumerDetails("A", "desc", "group", "test@aexp.com");
    await consumerPage.clickSubmit();
    await expect(consumerPage.locators.emptyField).toBeVisible();

    await consumerPage.fillConsumerDetails("A".repeat(300), "desc", "group", "test@aexp.com");
    await consumerPage.clickSubmit();
    await expect(consumerPage.locators.nameTooLong).toBeVisible();
  });

  test("03 - Validate invalid email shows error", async () => {
    await consumerPage.fillConsumerDetails("Valid Name", "desc", "group", "wrong.com");
    await consumerPage.clickSubmit();
    await expect(consumerPage.locators.invalidEmail).toBeVisible();
  });

  test("04 - Validate invalid group ID error", async () => {
    await consumerPage.fillConsumerDetails("Valid Name", "desc", "fakegroup", "test@aexp.com");
    await consumerPage.clickSubmit();
    await expect(consumerPage.locators.invalidGroup).toBeVisible();
  });

  test("05 - Validate tooltip on name help icon", async () => {
    const tooltipText = await consumerPage.validateTooltip("#name + .help-icon", "This field is used to create");
    expect(tooltipText).toBe(true);
  });

  test("06 - Validate tab order from name to description", async () => {
    await consumerPage.validateTabOrder("#name", "#description");
  });

  test("07 - Validate required error on blank form submit", async () => {
    await consumerPage.clickSubmit();
    await expect(consumerPage.locators.emptyField).toBeVisible();
  });

  test("08 - Validate success on valid data", async () => {
    await consumerPage.registerNewConsumer(randomName(), "desc", "group123", "test@aexp.com");
    await page.waitForTimeout(1000);
    await expect(page).toHaveURL(/.*addparticipant/);
  });

  test("09 - Validate cancel resets form fields", async () => {
    await consumerPage.fillConsumerDetails("Temp", "Test desc", "group", "test@aexp.com");
    await consumerPage.clickCancel();
    await expect(consumerPage.locators.nameField).toHaveValue("");
  });

  test("10 - Validate submit button state on input", async () => {
    await consumerPage.fillConsumerDetails(randomName(), "desc", "group", "test@aexp.com");
    await expect(consumerPage.locators.submitButton).toBeEnabled();
  });

  test("11 - Validate cancel button visible", async () => {
    await expect(consumerPage.locators.cancelButton).toBeVisible();
  });

  test("12 - Validate name label matches JSON", async () => {
    expect(await consumerPage.locators.nameLabel.textContent()).toContain(consumerFromData.uiLabels.name);
  });

  test("13 - Validate paragraph descriptions exist", async () => {
    for (const para of consumerFromData.uiParagraphs) {
      await expect(page.locator(`text=${para}`)).toBeVisible();
    }
  });

  test("14 - Validate help icons render", async () => {
    await expect(page.locator("#name + .help-icon")).toBeVisible();
    await expect(page.locator("#readWriteGroup + .help-icon")).toBeVisible();
  });

  test("15 - Validate max length doesn't accept more chars", async () => {
    const maxInput = "A".repeat(300);
    await consumerPage.locators.nameField.fill(maxInput);
    const value = await consumerPage.locators.nameField.inputValue();
    expect(value.length).toBeLessThanOrEqual(255);
  });

  test.afterEach(async () => {
    await homePage.quit();
  });
});
